unit MainU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.StdCtrls, DBGridEhGrouping, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh,
  EhLibVCL, GridsEh, DBAxisGridsEh, DBGridEh, Data.DB, Vcl.Imaging.GIFImg,
  dxGDIPlusClasses,System.Math, MemDS, VirtualTable,System.StrUtils, mmsystem,
  Vcl.MPlayer, SpeechLib_TLB, Vcl.OleServer,ShellAPI,IdHTTP, System.JSON,
  System.Net.HttpClient,  System.Generics.Collections;

type
  TUMainForm = class(TForm)
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    Refresh1: TMenuItem;
    SearchMemberConsumers1: TMenuItem;
    N1: TMenuItem;
    UploadMemberConsumers1: TMenuItem;
    GetFromCooptoLocalData1: TMenuItem;
    Panel1: TPanel;
    Panel3: TPanel;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    Shape1: TShape;
    Shape2: TShape;
    Panel4: TPanel;
    Panel2: TPanel;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    Shape3: TShape;
    Shape4: TShape;
    Panel6: TPanel;
    Panel7: TPanel;
    Panel8: TPanel;
    Label1: TLabel;
    Panel9: TPanel;
    ComboBox1: TComboBox;
    DBGridEh1: TDBGridEh;
    DSActiveMemberConsumer: TDataSource;
    Timer1: TTimer;
    VT: TVirtualTable;
    VTAccountNumber: TStringField;
    VTName: TStringField;
    DataSource1: TDataSource;
    SpeedButton6: TSpeedButton;
    Shape5: TShape;
    N2: TMenuItem;
    Hide1: TMenuItem;
    Panel10: TPanel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Panel12: TPanel;
    SpeedButton8: TSpeedButton;
    Shape6: TShape;
    SpeedButton9: TSpeedButton;
    Shape8: TShape;
    Panel14: TPanel;
    DBGridEh4: TDBGridEh;
    Panel15: TPanel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Image5: TImage;
    DSWinnerMemberConsumer: TDataSource;
    SpeedButton7: TSpeedButton;
    Shape7: TShape;
    Winner1: TMenuItem;
    mpBackGround: TMediaPlayer;
    mpSpinningWheel: TMediaPlayer;
    //SpVoice1: TSpVoice;
    SpeechSettings1: TMenuItem;
    Reports1: TMenuItem;
    AllAttendie1: TMenuItem;
    AllWinners1: TMenuItem;
    N3: TMenuItem;
    est1: TMenuItem;
    GenderTester1: TMenuItem;
    ReGenderize1: TMenuItem;
    Summary1: TMenuItem;
    Timer2: TTimer;
    AllWinnersPerClassification1: TMenuItem;
    SpVoice1: TSpVoice;
    Panel5: TPanel;
    procedure SpeedButton2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure SpeedButton5Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure GetFromCooptoLocalData1Click(Sender: TObject);
    procedure SpeedButton6Click(Sender: TObject);
    procedure SpeedButton4Click(Sender: TObject);
    procedure SearchMemberConsumers1Click(Sender: TObject);
    procedure N2Click(Sender: TObject);
    procedure Refresh1Click(Sender: TObject);
    procedure Hide1Click(Sender: TObject);
    procedure DataSource1DataChange(Sender: TObject; Field: TField);
    procedure Image2MouseEnter(Sender: TObject);
    procedure SpeedButton7Click(Sender: TObject);
    procedure Winner1Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    procedure SpeedButton8Click(Sender: TObject);
    procedure UploadMemberConsumers1Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure mpBackGroundNotify(Sender: TObject);
    procedure CreateABatchFile(AAccountNumber,AName:String);
    procedure AllAttendie1Click(Sender: TObject);
    procedure Label4Click(Sender: TObject);
    procedure est1Click(Sender: TObject);
    function isSpeakerAvailable():Boolean;
    function GetGenderOfFirstName(const firstName: string; const apiKey: string): string;
    function GetGendersOfFirstNames(const firstNames: String
    // const apiKey: string
    ): TDictionary<string,string>;
    function GetGenderOfFirstNames(const firstName: string
    //; const apiKey: string
    ): string;
    procedure GenderTester1Click(Sender: TObject);
    procedure ReGenderize1Click(Sender: TObject);
    procedure AllWinners1Click(Sender: TObject);
    procedure Summary1Click(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure AllWinnersPerClassification1Click(Sender: TObject);

  private
    { Private declarations }

  public
    { Public declarations }
    var AArea : String;
    var AAreaName : String;
    var I : Integer;
    Var SecLength:Integer;
    var TickInterval:Integer;
    var ALanguage:Integer;
    var AGender:Integer;
    var ClickCounter:Integer;
    var secondCount :Integer;
    var DefaultSQL : TStrings;
    var isRaffleTemplateCreated: Boolean;

  end;

var
  UMainForm: TUMainForm;

implementation

{$R *.dfm}

Uses MainModuleU,SearchMemberConsumerU,WinnerU,UploaderPreRegistrationU, LogInU, ReportU,RaffleTemplate1;

procedure TUMainForm.AllAttendie1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryReportAttendance.Close;
      qryReportAttendance.ParamByName('AYear').AsString := value;
      qryReportAttendance.Open;
      qryReportAttendance.First;
      qrlblDateRange.Caption := 'Y.R. ' + value;
      qrAttendance.Preview;
    end;
  end;
end;

procedure TUMainForm.AllWinners1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryReportWinners.Close;
      qryReportWinners.ParamByName('AYear').AsString := value;
      qryReportWinners.Open;
      qryReportWinners.First;
      QRPLabel13.Caption := 'Y.R. ' + value;
      qrWinner.Preview;
    end;
  end;
end;

procedure TUMainForm.AllWinnersPerClassification1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryVicinity.Close;
      qryVicinity.ParamByName('AClassification').AsString :=  '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryVicinity.Open;
      qryVicinity.First;
      qryReportWinnersClassification.Close;
      qryReportWinnersClassification.ParamByName('AYear').AsInteger := StrToInt(SplitString(value,'|')[1]);
      qryReportWinnersClassification.ParamByName('AClassification').AsString := '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryReportWinnersClassification.Open;
      qryReportWinnersClassification.First;
      qryReportWinnersClassification.First;
      QRPLabel34.Caption := 'AGMA WINNERS ' +UpperCase(SplitString(value,'|')[0]);
      QRPLabel35.Caption := 'Y.R. ' + SplitString(value,'|')[1];
      qrWinnersByClassification.Preview;
    end;
  end;
end;

procedure TUMainForm.ComboBox1Change(Sender: TObject);
begin
 Timer2.Enabled := True;
  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

  SpeedButton6Click(Sender);
end;

procedure TUMainForm.CreateABatchFile(AAccountNumber,AName:String);
var
  BatchList: TStringList;
begin
  // Create a new TStringList object
  BatchList := TStringList.Create;
  try
    // Add commands to the TStringList object

    with UMainModule do begin
      BatchList.Add('Dim Speak, Spoken');


      BatchList.Add('set Speak=CreateObject("sapi.SPVoice")');

      if ALanguage = 1 then begin
      // English
        if AGender = 1 then begin
          BatchList.Add('Spoken = "Congratulations to Mr. or Mrs. ' + AName + ', with Account Number of '
          + AAccountNumber.SubString(1, 1) + ' '
          + AAccountNumber.SubString(2, 1) + ' '
          + AAccountNumber.SubString(3, 1) + ' '
          + AAccountNumber.SubString(4, 1) + ' '
          + AAccountNumber.SubString(5, 1) + ' '
          + AAccountNumber.SubString(6, 1) + ' '
          + AAccountNumber.SubString(7, 1) + ' '
          + AAccountNumber.SubString(8, 1) + ' ' + '"' );
          //1 is Girl
          //BatchList.Add('Speak.Voice = Speak.GetVoices.Item(1)');
        end else begin
          BatchList.Add('Spoken = "Congratulations to Mr. or Mrs. ' + AName + ', with Account Number of '
          + AAccountNumber.SubString(1, 1) + ' '
          + AAccountNumber.SubString(2, 1) + ' '
          + AAccountNumber.SubString(3, 1) + ' '
          + AAccountNumber.SubString(4, 1) + ' '
          + AAccountNumber.SubString(5, 1) + ' '
          + AAccountNumber.SubString(6, 1) + ' '
          + AAccountNumber.SubString(7, 1) + ' '
          + AAccountNumber.SubString(8, 1) + ' ' + '"' );
          //0 is Boy
          //BatchList.Add('Speak.Voice = Speak.GetVoices.Item(1)');
        end;
      end else begin
      //Tagalog
        if AGender = 1 then begin

        end else begin

        end;
      end;

      BatchList.Add('Speak.speak Spoken');
    end;

    // Save the contents of the TStringList object to a file with a ".bat" extension

    BatchList.SaveToFile(ExtractFilePath(Application.ExeName) + 'SpeechText.vbs');
  finally
    // Free the TStringList object
    BatchList.Free;
  end;
end;

procedure TUMainForm.DataSource1DataChange(Sender: TObject; Field: TField);
begin
  //Label14.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
  //Label15.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
  //Label16.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
end;

function TUMainForm.isSpeakerAvailable: Boolean;
begin
  result := (waveOutGetNumDevs > 0);
end;

procedure TUMainForm.est1Click(Sender: TObject);
begin
  if isSpeakerAvailable then begin
    ShellExecute(0, 'open', PChar(ExtractFilePath(Application.ExeName)+'SpeechText.vbs'), nil, nil, SW_HIDE);
  end;
end;

procedure TUMainForm.FormActivate(Sender: TObject);
begin
  //mpBackGround.FileName := 'Wii_Music_background.wav';
  //mpBackGround.Notify := True;
  //mpBackGround.Open;
  //mpBackGround.Play;

  mpSpinningWheel.FileName := 'spinwheel.mp3';
  mpSpinningWheel.Open;
end;

procedure TUMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  //mpBackGround.Stop;
  UMainModule.CloseIniFile(AARea);
  isRaffleTemplateCreated := False;
end;

procedure TUMainForm.FormCreate(Sender: TObject);
begin

  Panel4.Align := alClient;
  AARea := 'ALL';
  ALanguage:= 1;
  AGender:= 1;
   secondCount := 0;
  isRaffleTemplateCreated := False;
    // Create an instance of ChildForm
  RaffleTemplate1U := TRaffleTemplate1U.Create(Application);
  // Show ChildForm inside Panel1
  RaffleTemplate1U.ShowInPanel(Panel5);
  UMainModule.CreateIniFile();
end;

procedure TUMainForm.FormShow(Sender: TObject);
var
 i:Integer;
begin
  Application.ProcessMessages;
  I := 0;
  TickInterval := 0;
  ClickCounter := 0;
  //DefaultSQL := UReport.qryReportWinnersClassification.SQL;
  AArea := UMainModule.ReadIniFile();

  if AArea = 'ALL' then begin
    AAreaName := '<ALL MUNICIPALITIES>';
  end else if AArea = '001' then begin
    AAreaName := 'BULAN';
  end else if AArea = '002' then begin
    AAreaName := 'MATNOG';
  end else if AArea = '003' then begin
    AAreaName := 'STA. MAGDALENA';
  end else if AArea = '004' then begin
    AAreaName := 'IROSIN';
  end else if AArea = '005' then begin
    AAreaName := 'BULUSAN';
  end else if AArea = '006' then begin
    AAreaName := 'JUBAN';
  end else if AArea = '007' then begin
    AAreaName := 'CASIGURAN';
  end else if AArea = '008' then begin
    AAreaName := 'MAGALLANES';
  end;

  Combobox1.ItemIndex :=  ComboBox1.Items.IndexOf(AAreaName);

  SpeedButton6Click(Sender);
end;

procedure TUMainForm.GenderTester1Click(Sender: TObject);
  Var
  value : String;
begin
  if not InputQuery('Gender Reveal', 'Put Name to Identify!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    GetGenderOfFirstNames(Value);
  end;

end;

procedure TUMainForm.GetFromCooptoLocalData1Click(Sender: TObject);
var
  I:Integer;
  value:String;
  BillMonthReverse:String;
begin
  With UMainModule do begin
    if not InputQuery('Generator Member Consumer', 'Please Put the Year for uploading!', value) then begin
      ShowMessage('User cancelled the dialog');
    end else begin
      //BillMonthReverse := RightStr(value,2) + LeftStr(value,2);

      for I := 1 to 8 do begin
        // delete first if data is available!
        //qryDeleteMemberConsumer.Close;
        //qryDeleteMemberConsumer.ParamByName('AArea').AsString := '00'+IntToStr(I);
        //qryDeleteMemberConsumer.Execute();
        // query all available data to be inserted in memberconsumer table
        qryMaster.Close;
        qryMaster.ParamByName('AArea').AsString := '00'+IntToStr(I);
        qryMaster.Open;
        qryMaster.First;

        qryMemberConsumers.Close;
        qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
        qryMemberConsumers.Open;
        qryMemberConsumers.First;

        while not qryMaster.EOF do begin
          qryMemberConsumers.Append;
          qryMemberConsumersAccountNumber.AsString := qryMasterAccountNumber.AsString;
          qryMemberConsumersName.AsString := qryMasterName.AsString;
          qryMemberConsumersArea.AsString := qryMasterArea.AsString;
          qryMemberConsumersAddress.AsString := qryMasterAddress.AsString;
          if qryMasterConsCode.AsString = 'X' then begin
            if qryMasterConnCode.AsString = '3' then begin
              //Disco Vacant
              qryMemberConsumersConnectionStatus.AsInteger := 3;
            end else begin
              //Disco
              qryMemberConsumersConnectionStatus.AsInteger := 2;
            end;
          end else begin
            qryMemberConsumersConnectionStatus.AsInteger := 1;
          end;
          qryMemberConsumersStatus.AsInteger := 0;
          qryMemberConsumersShuffleOrder.AsInteger := qryMemberConsumers.RecordCount + 1;
          qryMemberConsumersYear.AsString := value;
          //if Length(qryMasterGender.AsString) >= 3 then begin
          //  qryMemberConsumersGender.AsString := qryMasterGender.AsString;
          //end else begin
          //  qryMemberConsumersGender.AsString := '';
          //end;
          qryMemberConsumersRateCode.AsString := qryMasterRateCode.AsString;

          qryMemberConsumers.Post;
          qryMaster.Next;
        end;

      end;
      qryMCQualified.Close;
      qryMCQualified.ParamByName('AYear').AsInteger := CurrentYear;
      qryMCQualified.ParamByName('AArea').AsString := AArea;
      qryMCQualified.Open;
      qryMCQualified.First;
    end;
  end;
end;

function TUMainForm.GetGenderOfFirstNames(const firstName: string
//; const apiKey: string
): string;
var
  httpClient: THttpClient;
  url: string;
  response: IHTTPResponse;
  jsonObj: TJSONObject;
begin
  httpClient := THttpClient.Create;
  try
    //url := 'https://api.genderize.io/?name=' + firstName ;
    url := 'https://gender-api.com/get?name=' + firstName + '';
    // + '&apikey=' + apiKey;
    //Example: https://gender-api.com/get?name=elizabeth&key=zFCT2mhYdQKSBQuWj4gdW7awqvHpXeA6n5VU
    response := httpClient.Get(url);
  finally
    httpClient.Free;
  end;

  jsonObj := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONObject;
  try
    Result := jsonObj.GetValue('gender').Value;
  finally
    jsonObj.Free;
  end;

  //ShowMessage(Result);
end;

function TUMainForm.GetGendersOfFirstNames(const firstNames: String
//; const apiKey: string
): TDictionary<string,string>;
var
  httpClient: THttpClient;
  url: string;
  response: IHTTPResponse;
  jsonArr: TJSONArray;
  jsonObj: TJSONObject;
  i: Integer;
begin
  httpClient := THttpClient.Create;
  try
    url := 'https://api.genderize.io/?';
    for i := Low(firstNames) to High(firstNames) do
    begin
      url := url + 'name[]=' + firstNames[i] ;
      //+
      //'&';
    end;
    //url := url + 'apikey=' + apiKey;

    response := httpClient.Get(url);
  finally
    httpClient.Free;
  end;

  Result := TDictionary<string,string>.Create;
  jsonArr := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONArray;
  try
    for i := 0 to jsonArr.Count - 1 do
    begin
      jsonObj := jsonArr.Items[i] as TJSONObject;
      Result.Add(jsonObj.GetValue('name').Value, jsonObj.GetValue('gender').Value);
    end;
  finally
    jsonArr.Free;
  end;

end;


function TUMainForm.GetGenderOfFirstName(const firstName,
  apiKey: string): string;
var
  http: TIdHTTP;
  url, response: string;
  //parser: TJSONParser;
  jsonObj: TJSONObject;
begin
  http := TIdHTTP.Create(nil);
  try
    url := 'https://api.genderize.io/?name=' + firstName + '&apikey=' + apiKey;
    response := http.Get(url);
  finally
    http.Free;
  end;

  //parser := TJSONParser.Create(response);
  //try
  //  jsonObj := parser.Parse as TJSONObject;
  //  Result := jsonObj.GetValue('gender').Value;
  //finally
  //  parser.Free;
  //end;
end;

procedure TUMainForm.Hide1Click(Sender: TObject);
begin
  if Panel1.Visible then begin
    with RaffleTemplate1U do begin
      Panel1.Visible := False;

      Image3.Width :=  Self.Width;
      Image3.Left :=  0;
      label15.Width := Self.Width;
      label15.Left := 20;

      Image4.Width :=  Self.Width;
      Image4.Left :=  0;
      label16.Width := Self.Width;
      label16.Left := 20;

      //DBGridEh3.Width := Self.Width;
      //DBGridEh3.Left := 0;
      //DBGridEh2.Width := Self.Width;
      //DBGridEh2.Left := 0;
      // make center the spinning wheel
      // LEFT
      Image1.Left := (Self.Width DIV 2) - (Image1.Width DIV 2);
      SpeedButton5.Left := (Self.Width DIV 2) - (SpeedButton5.Width DIV 2);
      Image6.Left := (Self.Width DIV 2) - (Image6.Width DIV 2);
      Image2.Left := (Self.Width DIV 2) + (Image1.Width DIV 2) - (Image2.Width DIV 2);
      // TOP
      Image1.Top := ((Self.Height - Image3.Height)  DIV 2) - (Image1.Height DIV 2) + 10;
      SpeedButton5.Top := ((Self.Height - Image3.Height) DIV 2) - (SpeedButton5.Height DIV 2) + 10;
      Image6.Top := ((Self.Height - Image3.Height) DIV 2) - (Image6.Height DIV 2) + 6;
      Image2.Top := ((Self.Height - Image3.Height) DIV 2) - (Image2.Height DIV 2) + 10;
    end;
  end else begin
    with RaffleTemplate1U do begin
      Panel1.Visible := True;

      Image3.Width := Self.Width - Panel1.Width;
      Image3.Left := Panel1.Width;
      label15.Width := Self.Width - Panel1.Width;
      label15.Left := Panel1.Width + 20;

      Image4.Width :=  Self.Width - Panel1.Width;
      Image4.Left :=  Panel1.Width;
      label16.Width := Self.Width - Panel1.Width;
      label16.Left := Panel1.Width + 20;

      //DBGridEh3.Width := Self.Width - Panel1.Width;
      //DBGridEh3.Left := Panel1.Width;
      //DBGridEh2.Width := Self.Width - Panel1.Width;
      //DBGridEh2.Left := Panel1.Width;
      // make center the spinning wheel
      // LEFT
      Image1.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (Image1.Width DIV 2);
      SpeedButton5.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (SpeedButton5.Width DIV 2);
      Image6.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (Image6.Width DIV 2);
      Image2.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) + (Image1.Width DIV 2) - (Image2.Width DIV 2);
      // TOP
      Image1.Top := ((Self.Height - Image3.Height)  DIV 2) - (Image1.Height DIV 2) + 10;
      SpeedButton5.Top := ((Self.Height - Image3.Height) DIV 2) - (SpeedButton5.Height DIV 2) + 10;
      Image6.Top := ((Self.Height - Image3.Height) DIV 2) - (Image6.Height DIV 2) + 6;
      Image2.Top := ((Self.Height - Image3.Height) DIV 2) - (Image2.Height DIV 2) + 10;
    end;

  end;
end;

procedure TUMainForm.Image2MouseEnter(Sender: TObject);
begin
  //Label14.Visible := True;
  //mgHoverArrowShowSelected.Visible := True;
end;

procedure TUMainForm.Label4Click(Sender: TObject);
begin
  if ClickCounter>=5 then begin
    SpeedButton5.Enabled := True;

  end else begin
    SpeedButton5.Enabled := False;
    ClickCounter := ClickCounter +1;
  end;
end;

procedure TUMainForm.mpBackGroundNotify(Sender: TObject);
begin
  while mpBackGround.Mode = mpPlaying do
  begin
    if mpBackGround.Position >= mpBackGround.Length then
      mpBackGround.Play;
    Application.ProcessMessages;
  end;
end;

procedure TUMainForm.N2Click(Sender: TObject);
begin
  With UmainModule do begin

  end;
end;

procedure TUMainForm.Refresh1Click(Sender: TObject);
begin
  SpeedButton6Click(Sender);
  SpeedButton7Click(Sender);
end;

procedure TUMainForm.ReGenderize1Click(Sender: TObject);
begin
  with UMainModule do begin
    FDQuery1.Close;
    FDQuery1.Open();
    FDQuery1.First;
    qryMemberConsumers.Close;
    qryMemberConsumers.ParamByName('AYear').AsString := '2023';
    qryMemberConsumers.Open();
    qryMemberConsumers.First;
    while Not FDQuery1.EOF do begin
      if qryMemberConsumers.Locate('AccountNumber',FDQuery1AccountNumber.AsString,[]) then begin
        qryMemberConsumers.Edit;
        qryMemberConsumersGender.AsString :=  FDQuery1Gender.AsString;
        qryMemberConsumers.Post;
      end;

      FDQuery1.Next;
    end;

  end;
end;

procedure TUMainForm.SearchMemberConsumers1Click(Sender: TObject);
var
  UMemberConsumer : TUMemberConsumer;
begin
  try
    screen.Cursor := crHourGlass;
    UMemberConsumer := TUMemberConsumer.Create(nil);
    UMemberConsumer.ShowModal();
  finally
    UMemberConsumer.Free();
    screen.Cursor := crDefault;
  end;

end;

procedure TUMainForm.SpeedButton1Click(Sender: TObject);
begin
  Shape1.Visible := True;
  Shape2.Visible := False;
  Panel4.Visible := True;
  Panel7.Visible := False;
  SpeedButton6Click(Sender);
end;

procedure TUMainForm.SpeedButton2Click(Sender: TObject);
begin
  Shape1.Visible := False;
  Shape2.Visible := True;
  Panel4.Visible := False;
  Panel7.Visible := True;

  SpeedButton7Click(Sender);
end;

procedure TUMainForm.SpeedButton3Click(Sender: TObject);
Var
  I:Integer;
  J:Integer;
  Temp:Integer;
begin
   Timer2.Enabled := True;
   With UMainModule do begin
     J := RandomRange(1,2);
     //for I := 0 to J do begin
       qryMCQualified.First;
       while not qryMCQualified.EOF do begin
         qryMCQualified.Edit;
         qryMCQualifiedShuffleOrder.AsInteger := RandomRange(1,90000);
         qryMCQualified.Post;
         qryMCQualified.Next;
       end;
       qryMCQualified.Refresh;

     //end;
     qryMCQualified.First;
   end;
end;

procedure TUMainForm.SpeedButton4Click(Sender: TObject);
begin
   if SpeedButton4.Caption = 'Sort' then begin
     SpeedButton4.Caption := 'Disordered';
     UMainModule.qryMCQualified.IndexFieldNames := 'ShuffleOrder';
   end else begin
     SpeedButton4.Caption := 'Sort';
     UMainModule.qryMCQualified.IndexFieldNames := 'ID';
   end;
   UMainModule.qryMCQualified.First;
end;

procedure TUMainForm.SpeedButton5Click(Sender: TObject);
begin
   if UMainModule.qryMCQualified.IsEmpty then begin
     //MessageDlg('Cannot Spin the Wheel if Record is Empty!!!',mtWarning,);
     Exit;
   end;

   Application.ProcessMessages;
   //Timer1.Enabled := True;
   SecLength := (RandomRange(6, 15));

   Application.ProcessMessages;
  (Image1.Picture.Graphic as TGIFImage).Animate := True;
     (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
  Application.ProcessMessages;
  (Image3.Picture.Graphic as TGIFImage).Animate := True;
     (Image3.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
  (Image4.Picture.Graphic as TGIFImage).Animate := True;
     (Image4.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
   Application.ProcessMessages;
   (imgHoverArrowShowSelected.Picture.Graphic as TGIFImage).Animate := True;
  Application.ProcessMessages;
     (imgHoverArrowShowSelected.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
     Application.ProcessMessages;
      DoubleBuffered := True;// stops flickering
      Application.ProcessMessages;
      Timer1.Enabled := True;
      Application.ProcessMessages;


  //ShowMessage(IntToStr(SecLength));
end;

procedure TUMainForm.SpeedButton6Click(Sender: TObject);
begin
  With UMainModule do begin



    FDQuery2.Close;
    FDQuery2.ParamByName('AARea').AsString := AArea;
    //FDQuery2.ParamByName('AYear').AsString := CurrentYear;
    FDQuery2.Open;
    FDQuery2.First;

    qryMCQualified.Close;
    qryMCQualified.ParamByName('AARea').AsString := AArea;
    //qryMCQualified.ParamByName('AYear').AsString := CurrentYear;
    qryMCQualified.Open;
    qryMCQualified.First;

    qryMCQualified.IndexFieldNames := 'ShuffleOrder';
    qryMCQualified.First;

    qryWinnerMC.Close;
    qryWinnerMC.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMC.Open;


    Label3.Caption := FormatCurr('#,##0.00',(qryMCQualified.RecordCount));
  end;
end;

procedure TUMainForm.SpeedButton7Click(Sender: TObject);
begin
  With UMainModule do begin
    qryWinnerMemberConsumers.Close;
    qryWinnerMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMemberConsumers.ParamByName('AARea').AsString := AArea;
    qryWinnerMemberConsumers.Open;
    qryWinnerMemberConsumers.First;

    //qryWinnerMemberConsumers.IndexFieldNames := 'ShuffleOrder';
    qryWinnerMemberConsumers.First;

    qryWinnerMC.Close;
    qryWinnerMC.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMC.Open;

    Label11.Caption := FormatCurr('#,##0.00',(qryWinnerMemberConsumers.RecordCount));
  end;
end;

procedure TUMainForm.SpeedButton8Click(Sender: TObject);
begin
  if SpeedButton4.Caption = 'Sort' then begin
   SpeedButton4.Caption := 'Disordered';
   UMainModule.qryWinnerMemberConsumers.IndexFieldNames := 'AccountNumber';
  end else begin
   SpeedButton4.Caption := 'Sort';
   UMainModule.qryWinnerMemberConsumers.IndexFieldNames := 'OrderBy';
  end;
  UMainModule.qryWinnerMemberConsumers.First;
end;

procedure TUMainForm.Summary1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qrySummary.Close;
      qrySummary.ParamByName('AYear').AsString := value;
      qrySummary.Open;
      qrySummary.First;
      QRPLabel24.Caption := 'Y.R. ' + value;
      qrSummary.Preview;
    end;
  end;
end;

procedure TUMainForm.Timer1Timer(Sender: TObject);
var
  IndicatorID:Integer;
  UMemberConsumer : TUMemberConsumer;
  AAccountNumber,AName:String;
begin
  Application.ProcessMessages;

  I := I + 1;
  TickInterval := TickInterval + Timer1.Interval;
  {if I = 1 then begin
    (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 500;
  end else if I = 2 then begin
    (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 400;

  end else if I = 3 then begin
    (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 300;

  end else if I = 4 then begin
    (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 200;

  end else if I = 5 then begin
    (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;

  end else}

  //mpSpinningWheel.Play;
  if TickInterval = (SecLength*1000) then begin
    (Image1.Picture.Graphic as TGIFImage).Animate := False;
     (Image1.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
    Application.ProcessMessages;
    (Image3.Picture.Graphic as TGIFImage).Animate := False;
    Application.ProcessMessages;
     (Image3.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
     (Image4.Picture.Graphic as TGIFImage).Animate := False;
    Application.ProcessMessages;
     (Image4.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
   Application.ProcessMessages;
     (imgHoverArrowShowSelected.Picture.Graphic as TGIFImage).Animate := False;
     (imgHoverArrowShowSelected.Picture.Graphic as TGIFImage ).AnimationSpeed:= 100;// adjust your speed
      DoubleBuffered := True;// stops flickering
    IndicatorID := RandomRange(1, UMainModule.qryMCQualified.RecordCount+1);
    UMainModule.qryMCQualified.RecNo := IndicatorID;
    Timer1.Enabled := False;
    I:=0;
    TickInterval := 0;
    Application.ProcessMessages;
      try
        mpSpinningWheel.Stop;
        AAccountNumber := UMainModule.qryMCQualifiedAccountNumber.AsString;
        AName := UMainModule.qryMCQualifiedName.AsString;
        CreateABatchFile(AAccountNumber,AName);
        Application.ProcessMessages;
        screen.Cursor := crHourGlass;
        UWinner := TUWinner.Create(nil);
        UWinner.ShowModal();
        Application.ProcessMessages;

        Label16.Caption := UWinner.lblAccountNumber.Caption + ' | ' + UWinner.lblName.Caption;
        Label15.Caption := UWinner.lblAccountNumber.Caption + ' | ' + UWinner.lblName.Caption;
        Label14.Caption := UWinner.lblAccountNumber.Caption + ' | ' + UWinner.lblName.Caption;
        Application.ProcessMessages;
      finally
        UWinner.Free();
        screen.Cursor := crDefault;
        Application.ProcessMessages;

      end;
      Exit;
  end else begin
    Application.ProcessMessages;
    IndicatorID := RandomRange(1, UMainModule.qryMCQualified.RecordCount);
    UMainModule.qryMCQualified.RecNo := IndicatorID;
    Application.ProcessMessages;
  end;
  Application.ProcessMessages;
  VT.Clear;
  VT.Append;
  VTAccountNumber.AsString := UMainModule.qryMCQualifiedAccountNumber.AsString;
  VTName.AsString := UMainModule.qryMCQualifiedName.AsString;
  VT.Post;



  Application.ProcessMessages;
end;

procedure TUMainForm.Timer2Timer(Sender: TObject);
begin
  if secondCount >= 5 then begin
    UMainModule.qryMCQualified.Last;
    Timer2.Enabled := False;
    secondCount := 0;
  end else begin
    secondCount := secondCount + 1;

  end;

end;

procedure TUMainForm.UploadMemberConsumers1Click(Sender: TObject);
begin
  try
    screen.Cursor := crHourGlass;
    UUploaderPreRegistration := TUUploaderPreRegistration.Create(nil);
    UUploaderPreRegistration.ShowModal();
  finally
    UUploaderPreRegistration.Free();
    screen.Cursor := crDefault;
  end;
end;

procedure TUMainForm.Winner1Click(Sender: TObject);
begin
  try
    screen.Cursor := crHourGlass;
    UWinner := TUWinner.Create(nil);
    UWinner.ShowModal();
  finally
    UWinner.Free();
    screen.Cursor := crDefault;
  end;
end;

end.
