unit SearchMemberConsumerU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, DBGridEhGrouping, ToolCtrlsEh,
  DBGridEhToolCtrls, DynVarsEh, Vcl.StdCtrls, Vcl.WinXCtrls, EhLibVCL, GridsEh,
  DBAxisGridsEh, DBGridEh, Data.DB, Vcl.ExtCtrls,System.Math, Vcl.Buttons,
  FireDAC.Comp.BatchMove.DataSet, FireDAC.Comp.BatchMove, FireDAC.Stan.Intf,
  MemDS, VirtualTable, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Comp.BatchMove.Text,System.IOUtils, Vcl.Menus,System.StrUtils,
  CPort,U_UsbComponent,U_USBSerialPortMonitor,ShellAPI,CommandPromtUnit;

type
  TUMemberConsumer = class(TForm)
    DSMemberConsumer: TDataSource;
    Panel1: TPanel;
    Panel2: TPanel;
    Label1: TLabel;
    DBGridEh1: TDBGridEh;
    SearchBox1: TSearchBox;
    Label2: TLabel;
    Panel3: TPanel;
    ComboBox1: TComboBox;
    GroupBox1: TGroupBox;
    DBGridEh2: TDBGridEh;
    Panel4: TPanel;
    Label3: TLabel;
    lblNoOfEntry: TLabel;
    DSDataEntries: TDataSource;
    Panel5: TPanel;
    GroupBox2: TGroupBox;
    Panel6: TPanel;
    Label4: TLabel;
    Panel7: TPanel;
    Label5: TLabel;
    Panel8: TPanel;
    Label6: TLabel;
    Panel9: TPanel;
    Label7: TLabel;
    Label8: TLabel;
    SpeedButton1: TSpeedButton;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    vtMemberConsumer: TVirtualTable;
    FDBatchMove1: TFDBatchMove;
    FDBatchMoveDataSetReader1: TFDBatchMoveDataSetReader;
    FDBatchMoveDataSetWriter1: TFDBatchMoveDataSetWriter;
    qryCountDisconnected: TFDQuery;
    qryCountDisconnectedCountDisco: TLargeintField;
    Panel10: TPanel;
    SpeedButton2: TSpeedButton;
    Shape2: TShape;
    SpeedButton3: TSpeedButton;
    FDBatchMove2: TFDBatchMove;
    FDBatchMoveDataSetReader2: TFDBatchMoveDataSetReader;
    FDBatchMoveTextWriter1: TFDBatchMoveTextWriter;
    Shape1: TShape;
    Timer1: TTimer;
    PopupMenu1: TPopupMenu;
    DeleteSelectedRecord1: TMenuItem;
    N1: TMenuItem;
    ExportAsCSVFile1: TMenuItem;
    Shape3: TShape;
    vtMemberConsumerid: TVirtualAutoIncField;
    vtMemberConsumerAccountNumber: TStringField;
    vtMemberConsumerName: TStringField;
    vtMemberConsumerArea: TStringField;
    vtMemberConsumerAddress: TStringField;
    vtMemberConsumerStatus: TIntegerField;
    vtMemberConsumerShuffleOrder: TIntegerField;
    vtMemberConsumerConnectionStatus: TLongWordField;
    vtMemberConsumerEntryMode: TStringField;
    vtMemberConsumerYear: TLongWordField;
    vtMemberConsumerGender: TStringField;
    vtMemberConsumerisPosted: TLongWordField;
    vtMemberConsumerRateCode: TStringField;
    vtMemberConsumerIsQualifiedForRaffle: TShortintField;
    vtMemberConsumerIsSignatureAvailable: TShortintField;
    Panel12: TPanel;
    Label13: TLabel;
    Panel13: TPanel;
    Label14: TLabel;
    ComPort1: TComPort;
    Label15: TLabel;
    UsbRemovalTimer: TTimer;
    UsbArrivalTimer: TTimer;
    BitBtn1: TBitBtn;
    RefreshDBGrid1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    ShowQualified1: TMenuItem;
    ShowNotQualified1: TMenuItem;
    GroupBox3: TGroupBox;
    Label12: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Shape4: TShape;
    Panel11: TPanel;
    Panel14: TPanel;
    Panel15: TPanel;
    procedure SearchBox1Change(Sender: TObject);
    procedure DBGridEh1KeyPress(Sender: TObject; var Key: Char);
    procedure FormShow(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBGridEh1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure DBGridEh1DblClick(Sender: TObject);
    procedure DSDataEntriesDataChange(Sender: TObject; Field: TField);
    procedure DSMemberConsumerDataChange(Sender: TObject; Field: TField);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    function Operations(AArea:String):String;
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Timer1Timer(Sender: TObject);
    procedure DeleteSelectedRecord1Click(Sender: TObject);
    procedure DBGridEh2DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure SearchBox1DblClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure UsbArrivalTimerTimer(Sender: TObject);
    procedure UsbRemovalTimerTimer(Sender: TObject);
    procedure IntializeComPort();
    procedure ComPort1RxChar(Sender: TObject; Count: Integer);
    procedure QRCodeParse(AString:String;AParseBy:String;AReturnArray: TArray<string>);
    procedure Label15Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure RefreshDBGrid1Click(Sender: TObject);
    procedure ShowQualified1Click(Sender: TObject);
    procedure ShowNotQualified1Click(Sender: TObject);
  private
    { Private declarations }
    FCompUSB: TComponentUSB;

    procedure USBArrival(Sender: TObject);
    procedure USBRemoval(Sender: TObject);
    procedure ShellExecuteScrcpy();
    procedure RunADBCommand(Command:String);
    procedure RunMultipleADBCommands(const ADBCommands: array of string);
    procedure RunHTMLAPI();
    var AArea : String;
    var AAreaName : String;
    var SignatureDeviceIsAvailable : boolean;
    ScrcpyRunning: Boolean;
  public
    { Public declarations }
  end;

var
  UMemberConsumer: TUMemberConsumer;
  PostingCounter:Integer;

implementation

{$R *.dfm}

Uses MainModuleU,SignatureU, MainU;

procedure TUMemberConsumer.BitBtn1Click(Sender: TObject);
begin
  //RunHTMLAPI();
  //ShowMessage();
end;

procedure TUMemberConsumer.ComboBox1Change(Sender: TObject);
begin
  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

  with UMainModule do begin
    if AArea <> 'ALL' then begin

      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AARea) + ' AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;
      tblSearchMemberConsumer.First;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.Filter := 'Area = ' +QuotedStr(AARea);
      //qryCastedMemberConsumers.Filtered := True;
      //qryCastedMemberConsumers.First;

      //qryMCQualified.Filtered := False;
      //qryMCQualified.Filter := 'Area = ' +QuotedStr(AARea);
      //qryMCQualified.Filtered := True;
      //qryMCQualified.First;

      //qryMCQualifiedAll.Filtered := False;
      //qryMCQualifiedAll.Filter := 'Area = ' +QuotedStr(AARea);
      //qryMCQualifiedAll.Filtered := True;
      //qryMCQualifiedAll.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;
    end else begin
      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Year = ' + QuotedStr(IntToStr(CurrentYear)) + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.First;

      //qryMCQualified.Filtered := False;
      //qryMCQualified.First;

      //qryMCQualified.Filtered := False;
      //qryMCQualified.Filter := 'Area = ' +QuotedStr(AARea);
      //qryMCQualified.Filtered := True;
      //qryMCQualified.First;

      //qryMCQualifiedAll.Filtered := False;
      //qryMCQualifiedAll.Filter := 'Area = ' +QuotedStr(AARea);
      //qryMCQualifiedAll.Filtered := True;
      //qryMCQualifiedAll.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;
    end;
    
  end;
end;

procedure TUMemberConsumer.ComPort1RxChar(Sender: TObject; Count: Integer);
 var
  Str: String;
  ReturnArray: TArray<string>;
begin
  SetLength(ReturnArray, 1);
  ComPort1.ReadStr(Str, Count);
  QRCodeParse(Str, '|', ReturnArray);
  SearchBox1.Text := ReturnArray[0];
  DBGridEh1.SetFocus;

  keybd_event(VK_RETURN, 0, 0, 0);
  keybd_event(VK_RETURN, 0, KEYEVENTF_KEYUP, 0);
  Sleep(500);
  keybd_event(VK_RETURN, 0, 0, 0);
  keybd_event(VK_RETURN, 0, KEYEVENTF_KEYUP, 0);
  //ShowMessage(ReturnArray[0]);

end;

procedure TUMemberConsumer.DBGridEh1DblClick(Sender: TObject);
Var
  UFormSignature : TUFormSignature;
begin
  with UMainModule do begin
    if qryMemberConsumers.Locate('AccountNumber',vtMemberConsumerAccountNumber.AsString,[]) then begin
      if vtMemberConsumerConnectionStatus.AsInteger = 1 then begin
        if MessageDlg('You Are About to Put this Consumer to the Raffle Entry!!' + #10#13 +
        'Account Number  : ' + vtMemberConsumerAccountNumber.AsString + #10#13 +
        'Account Name    : ' + vtMemberConsumerName.AsString + #10#13 +
        'With Address of : ' + vtMemberConsumerAddress.AsString,mtWarning,[mbYes,mbNo],0) = mrYes then begin
          if (vtMemberConsumerRateCode.AsString = 'R') OR (vtMemberConsumerRateCode.AsString = 'C') then begin
            if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0) AND (SignatureDeviceIsAvailable)) then begin
              UFormSignature := TUFormSignature.Create(nil);
              UFormSignature.ShowModal;
            end else begin
              if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
                if qrySettingsSignatureDevice.AsString.Contains('HTML') then begin
                  //ShellExecuteScrcpy();
                  //RunADBCommand('adb -s YLEQRGUKEQ49L7UC shell am start -a android.intent.action.VIEW -d "https://www.example.com" ');
                end else if qrySettingsSignatureDevice.AsString.Contains('PAD') then begin

                end else begin
                  MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
                end;
              end;
              if qryMemberConsumersIsQualifiedForRaffle.AsInteger=1 then begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 1;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
                // 1 = Active Consumers
              end else begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 4;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
                // 1 = Active Consumers
              end;
            end;
          end else begin
            if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0) AND (SignatureDeviceIsAvailable)) then begin
              UFormSignature := TUFormSignature.Create(nil);
              UFormSignature.ShowModal;
            end else begin
              if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
                MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
              end;
              if qryMemberConsumersIsQualifiedForRaffle.AsInteger=1 then begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 3;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
              end else begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 4;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
              end;
            end;
          end;
        end else begin
          Exit;
        end;
      end else begin
        if MessageDlg('This Consumer is Disconnected or Disco-Vacant!!' + #10#13 +
        'He/She can Still be part of This Event but,'+ #10#13 +
        'Cannot be Part of the Raffle Draw!!' + #10#13,mtWarning,[mbYes,mbNo],0) = mrYes then begin
          if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 1) AND (SignatureDeviceIsAvailable)) then begin
              UFormSignature := TUFormSignature.Create(nil);
              UFormSignature.ShowModal;
          end else begin
            if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
              MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
            end;
            if qryMemberConsumersIsQualifiedForRaffle.AsInteger=1 then begin
              qryMemberConsumers.Edit;
              qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
              qryMemberConsumersStatus.AsInteger := 3;
              qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
              // 3 = Disconnected but cannot be part of Raffle Draw
              qryMemberConsumers.Post;
              PostingCounter := PostingCounter + 1;
            end else begin
              qryMemberConsumers.Edit;
              qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
              qryMemberConsumersStatus.AsInteger := 4;
              qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
              // 3 = Disconnected but cannot be part of Raffle Draw
              qryMemberConsumers.Post;
              PostingCounter := PostingCounter + 1;
            end;
          end;
        end else begin
          Exit;
        end;
      end;
      vtMemberConsumer.Delete;

    end;
    Label9.Caption := IntToStr(PostingCounter);
    qryMemberConsumers.Refresh;
    //qryCastedMemberConsumers.Refresh;
    qryMCQualified.Refresh;
    qryMCQualifiedAll.Refresh;
  end;
end;

procedure TUMemberConsumer.DBGridEh1DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumnEh;
  State: TGridDrawState);
begin
  With UMainModule do begin
     if vtMemberConsumerConnectionStatus.AsString = '2' then begin
       DBGridEh1.Canvas.Brush.Color:=clMedGray;
     end else if vtMemberConsumerConnectionStatus.AsString = '3' then begin
       DBGridEh1.Canvas.Brush.Color:=clHighlight;
     end;

     if vtMemberConsumerIsQualifiedForRaffle.AsInteger <> 1 then begin
        DBGridEh1.Canvas.Brush.Color:=clYellow;
     end;

     if vtMemberConsumerIsSignatureAvailable.AsInteger <> 1 then begin
        DBGridEh1.Canvas.Brush.Color:=clRed;
     end;

     DBGridEh1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;

end;

procedure TUMemberConsumer.DBGridEh1KeyPress(Sender: TObject; var Key: Char);
begin
  if Key in [#13] then begin
    with UMainModule do begin
      if qryMemberConsumers.Locate('AccountNumber',vtMemberConsumerAccountNumber.AsString,[]) then begin
        if vtMemberConsumerConnectionStatus.AsInteger = 1 then begin
          if MessageDlg('You Are About to Put this Consumer to the Raffle Entry!!' + #10#13 +
          'Account Number  : ' + vtMemberConsumerAccountNumber.AsString + #10#13 +
          'Account Name    : ' + vtMemberConsumerName.AsString + #10#13 +
          'With Address of : ' + vtMemberConsumerAddress.AsString,mtWarning,[mbYes,mbNo],0) = mrYes then begin
            if (vtMemberConsumerRateCode.AsString = 'R') OR (vtMemberConsumerRateCode.AsString = 'C') then begin
              if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0) AND (SignatureDeviceIsAvailable)) then begin
                UFormSignature := TUFormSignature.Create(nil);
                UFormSignature.ShowModal;

              end else begin
                if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
                  if qrySettingsSignatureDevice.AsString.Contains('HTML') then begin

                    //ShellExecuteScrcpy();
                    //RunMultipleADBCommands(['adb devices', 'adb -s YLEQRGUKEQ49L7UC shell am start -a android.intent.action.VIEW -d "https://www.example.com"']);
                    //RunADBCommand('adb -s YLEQRGUKEQ49L7UC shell am start -a android.intent.action.VIEW -d "https://www.example.com" ');
                  end else if qrySettingsSignatureDevice.AsString.Contains('PAD') then begin

                  end else begin
                    MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
                  end;
                end;
                if qryMemberConsumersIsQualifiedForRaffle.AsInteger = 1 then begin

                  qryMemberConsumers.Edit;
                  qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                  qryMemberConsumersStatus.AsInteger := 1;
                  qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                  qryMemberConsumers.Post;
                  PostingCounter := PostingCounter + 1;
                  // 1 = Active Consumers
                end else begin
                  qryMemberConsumers.Edit;
                  qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                  qryMemberConsumersStatus.AsInteger := 4;
                  qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                  qryMemberConsumers.Post;
                  PostingCounter := PostingCounter + 1;
                  // 1 = Active Consumers
                end;
              end;
            end else begin
              if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0) AND (SignatureDeviceIsAvailable)) then begin
                UFormSignature := TUFormSignature.Create(nil);
                UFormSignature.ShowModal;
              end else begin
                if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
                  MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
                end;
                if qryMemberConsumersIsQualifiedForRaffle.AsInteger = 1 then begin
                  qryMemberConsumers.Edit;
                  qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                  qryMemberConsumersStatus.AsInteger := 3;
                  qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                  qryMemberConsumers.Post;
                  PostingCounter := PostingCounter + 1;
                end else begin
                  qryMemberConsumers.Edit;
                  qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                  qryMemberConsumersStatus.AsInteger := 4;
                  qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                  qryMemberConsumers.Post;
                  PostingCounter := PostingCounter + 1;
                end;
              end;

            end;
          end;
        end else begin
          if MessageDlg('This Consumer is Disconnected or Disco-Vacant!!' + #10#13 +
          'He/She can Still be part of This Event but,'+ #10#13 +
          'Cannot be Part of the Raffle Draw!!' + #10#13,mtWarning,[mbYes,mbNo],0) = mrYes then begin
            if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 1) AND (SignatureDeviceIsAvailable)) then begin
                UFormSignature := TUFormSignature.Create(nil);
                UFormSignature.ShowModal;
            end else begin
              if ((qryMemberConsumersIsSignatureAvailable.AsInteger = 0)) then begin
                MessageDlg('Need Signature!' + #10#13 + 'Account Number : ' + vtMemberConsumerAccountNumber.AsString ,mtError,[mbOk],0);
              end;
              if qryMemberConsumersIsQualifiedForRaffle.AsInteger = 1 then begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 3;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                // 3 = Disconnected but cannot be part of Raffle Draw
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
              end else begin
                qryMemberConsumers.Edit;
                qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
                qryMemberConsumersStatus.AsInteger := 4;
                qryMemberConsumersEntryMode.AsString := 'VENUE-REGISTRATION';
                // 3 = Disconnected but cannot be part of Raffle Draw
                qryMemberConsumers.Post;
                PostingCounter := PostingCounter + 1;
              end;
            end;
          end;
        end;
        vtMemberConsumer.Delete;


      end;
      Label9.Caption := IntToStr(PostingCounter);
      qryMemberConsumers.Refresh;
      //qryCastedMemberConsumers.Refresh;
      qryMCQualified.Refresh;
      qryMCQualifiedAll.Refresh;
    end;
  end;
end;

procedure TUMemberConsumer.DBGridEh2DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumnEh;
  State: TGridDrawState);
begin
  With UMainModule do begin
     if qryMCQualifiedAllIsPosted.AsString = '0' then begin
       DBGridEh2.Canvas.Brush.Color:=clGray;
     end else if qryMCQualifiedAllStatus.AsString = '1' then begin
       DBGridEh2.Canvas.Brush.Color:=clHighlight;
     end;


     DBGridEh2.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
end;

procedure TUMemberConsumer.DeleteSelectedRecord1Click(Sender: TObject);
Var
  AccountNumber : String;
begin
  if MessageDlg ('Are you Sure you want to Delete this Record?'+
  #13#10+
  'AccountNumber :' + UMainModule.qryMCQualifiedAccountNumber.AsString +#13#10+
  'Name :' + UMainModule.qryMCQualifiedName.AsString +#13#10+
  'Address :' + UMainModule.qryMCQualifiedAddress.AsString,
   mtConfirmation, [mbYes, mbNo], 0) = mrYes then begin
     with UMainModule do begin
       AccountNumber := qryMCQualifiedAccountNumber.AsString;
       if tblSearchMemberConsumer.Locate('AccountNumber',AccountNumber,[]) then begin
           if tblSearchMemberConsumerisPosted.AsInteger = 0 then begin
           qryMCQualified.Locate('AccountNumber',AccountNumber,[]);
           qryMCQualified.Edit;
           qryMCQualifiedStatus.AsInteger := 0;
           qryMCQualified.Post;
           qryMCQualified.Refresh;
           qryMCQualifiedAll.Refresh;

           vtMemberConsumer.Append;
           vtMemberConsumerAccountNumber.AsString := tblSearchMemberConsumerAccountNumber.AsString;
           vtMemberConsumerName.AsString := tblSearchMemberConsumerName.AsString;
           vtMemberConsumerArea.AsString := tblSearchMemberConsumerArea.AsString;
           vtMemberConsumerAddress.AsString := tblSearchMemberConsumerAddress.AsString;
           vtMemberConsumerStatus.AsInteger := tblSearchMemberConsumerStatus.AsInteger;
           vtMemberConsumerShuffleOrder.AsInteger := tblSearchMemberConsumerShuffleOrder.AsInteger;
           vtMemberConsumerConnectionStatus.AsString := tblSearchMemberConsumerConnectionStatus.AsString;
           vtMemberConsumerYear.AsInteger := tblSearchMemberConsumerYear.AsInteger;
           vtMemberConsumerEntryMode.AsString := tblSearchMemberConsumerEntryMode.AsString;
           vtMemberConsumerGender.AsString := tblSearchMemberConsumerGender.AsString;
           vtMemberConsumerisPosted.AsInteger := 0;
           vtMemberConsumer.Post;
           PostingCounter := PostingCounter -1;
         end;
       end else begin
         MessageDlg ('You Cannot Delete A Posted Record!',mtInformation, [mbYes, mbNo], 0);
       end;
     end;
   end;
end;

procedure TUMemberConsumer.DSDataEntriesDataChange(Sender: TObject;
  Field: TField);
begin
  lblNoOfEntry.Caption := FormatCurr('#,##0.00',(UMainModule.qryMCQualified.RecordCount));
end;

procedure TUMemberConsumer.DSMemberConsumerDataChange(Sender: TObject;
  Field: TField);
begin
  Label8.Caption := FormatCurr('#,##0.00',(vtMemberConsumer.RecordCount));
end;



procedure TUMemberConsumer.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if MessageDlg ('Before Exiting to this Form You Need to Post Entry Record!!',
   mtConfirmation, [mbOK, mbNo], 0) = mrNo then begin
     CanClose := False;
   end else begin
     if PostingCounter>=1 then begin
       CanClose := False;
       MessageDlg('Please Call For The Designated Support Person!!',mtError,[mbClose],0);
     end else begin
       CanClose := True;
       UMainModule.qryMCQualified.Filtered := False;
       UMainModule.qryMCQualifiedAll.Filtered := False;
       UMainForm.SpeedButton6Click(Sender);
     end;
   end;
end;

procedure TUMemberConsumer.FormCreate(Sender: TObject);
begin
  AARea := 'ALL';
  //IntializeComPort;
end;

procedure TUMemberConsumer.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_F1 then begin
    ShowMEssage('Escape!!');

  end;
end;

procedure TUMemberConsumer.FormShow(Sender: TObject);
begin
  SignatureDeviceIsAvailable := False;
  With UMainModule do begin
    AArea := UMainModule.ReadIniFile();
  Timer1.Enabled := True;
  if AArea = 'ALL' then begin
    AAreaName := '<ALL MUNICIPALITIES>';
  end else if AArea = '001' then begin
    AAreaName := 'BULAN';
  end else if AArea = '002' then begin
    AAreaName := 'MATNOG';
  end else if AArea = '003' then begin
    AAreaName := 'STA. MAGDALENA';
  end else if AArea = '004' then begin
    AAreaName := 'IROSIN';
  end else if AArea = '005' then begin
    AAreaName := 'BULUSAN';
  end else if AArea = '006' then begin
    AAreaName := 'JUBAN';
  end else if AArea = '007' then begin
    AAreaName := 'CASIGURAN';
  end else if AArea = '008' then begin
    AAreaName := 'MAGALLANES';
  end;

  Combobox1.ItemIndex :=  ComboBox1.Items.IndexOf(AAreaName);

    tblSearchMemberConsumer.Close;
    tblSearchMemberConsumer.Open;
    tblSearchMemberConsumer.Filtered := False;
    tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AArea) + 'AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + ' AND Status = 0';
    tblSearchMemberConsumer.Filtered := True;
    tblSearchMemberConsumer.First;

    qryMemberConsumers.Close;
    qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryMemberConsumers.Open;
    qryMemberConsumers.First;

    qryCastedMemberConsumers.Close;
    qryCastedMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryCastedMemberConsumers.Open;
    qryCastedMemberConsumers.First;

    qryMCQualified.Close;
    qryMCQualified.ParamByName('AArea').AsString := AArea;
    qryMCQualified.ParamByName('AYear').AsInteger := CurrentYear;
    qryMCQualified.Open;
    qryMCQualified.First;

    qryMCQualifiedAll.Close;
    //qryMCQualifiedAll.ParamByName('AArea').AsString := AArea;
    qryMCQualifiedAll.ParamByName('AYear').AsInteger := CurrentYear;
    qryMCQualifiedAll.Open;
    qryMCQualifiedAll.First;

    vtMemberConsumer.Clear;
    FDBatchMove1.Execute;
    vtMemberConsumer.Open;

    qryCheckerPosting.Close;
    //qryCheckerPosting.ParamByName('AArea').AsString := AArea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
      PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
    end else begin
      PostingCounter := 0;
    end;
    Label9.Caption := IntToStr(PostingCounter);
  end;

  FCompUSB := TComponentUSB.Create(Self);
  FCompUSB.OnUSBArrival := USBArrival;
  FCompUSB.OnUSBRemove := USBRemoval;
  IntializeComPort;
end;

procedure TUMemberConsumer.IntializeComPort;
begin
  ComPort1.Port := UMainModule.qrySettingsCOMPort.AsString;
  try
    if ComPort1.Connected then begin
      ComPort1.Connected := False;
      ComPort1.Close;
      Label15.Caption := 'CODE SCANNER DISCONNECTED';
      Label15.Font.Color := clRed;
    end else begin
      ComPort1.Open;
      Label15.Caption := 'CODE SCANNER CONNECTED';
      Label15.Font.Color := clBlue;
    end;
  except
    ComPort1.Connected := False;
    Label15.Caption := 'CODE SCANNER DISCONNECTED';
    Label15.Font.Color := clRed;
    Exit;
  end;
end;

procedure TUMemberConsumer.Label15Click(Sender: TObject);
begin
  ComPort1.Open;
  Label15.Caption := 'CODE SCANNER CONNECTED';
  Label15.Font.Color := clBlue;
end;

function TUMemberConsumer.Operations(AArea:String):String;
Var
  FileName : String;
  FileDefault : String;
  FilePath : String;
begin
  try
    { Copy file from source file path to destination file path }

    FileDefault := ExtractFilePath(Application.ExeName) + 'AGMA_AREACODE.csv';
    FileName := ExtractFilePath(Application.ExeName) + 'AGMA_'+AArea + '.csv';
    FilePath := ExtractFilePath(Application.ExeName);

    if FileExists(FileName) then begin
       TFile.Delete(FileName);
    end;

    if FileExists(FileDefault) then begin
       TFile.Copy(FileDefault, FilePath+'AGMA_' + AArea + '.csv');
    end;

    if FileExists(FilePath + 'AGMA_AREACODE - Copy.csv') then begin
      RenameFile(FilePath + 'AGMA_AREACODE - Copy.csv',FilePath + 'AGMA_' + AArea + '.csv');
    end;

    //if FileExists(FileName) then begin
    //   Result := FilePath + 'AGMA_' + AArea + '.csv';
    //end else begin
    //   ShowMessage('Quick Fix Please Call the Designated Support Person!, And He Will need to Copy the Existed Data CSV File in the Directory!')
    //end;

    Result := FilePath + 'AGMA_' + AArea + '.csv';
  except
    MessageDlg('Incorrect path' + #13#10 + 'Call IT Stand By!', mtError, [mbOK], 0);
    Exit;
  end;
end;

procedure TUMemberConsumer.QRCodeParse(AString, AParseBy: String;
  AReturnArray: TArray<string>);
var
  Parts: TArray<string>;
  i: Integer;
begin
  Parts := AString.Split([AParseBy]);
  for i := Low(Parts) to High(Parts) do
  begin
    if i < Length(AReturnArray) then
      AReturnArray[i] := Parts[i]
    else
      Break; // Stop if we run out of space in AReturnArray
  end;
end;

procedure TUMemberConsumer.SearchBox1Change(Sender: TObject);
begin
  //DBGridEh1.SearchPanel.SearchingText := SearchBox1.Text;

  //if UMainModule.qryCastedMemberConsumers.IsEmpty then begin
  //  DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
  //  if not UMainModule.qryMCQualified.IsEmpty then begin
  //    MessageDlg('Member Consumer is Already Registered!', mtWarning, [mbClose],0);
  //  end else begin
  //    MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
  //  end;
  //end;

  //if Length(SearchBox1.Text) <= 0 then begin
  //  DBGridEh2.SearchPanel.SearchingText := '';
  //end;
  if RadioButton1.Checked then begin
    vtMemberConsumer.Filtered:=False;
    vtMemberConsumer.Filter:= 'AccountNumber LIKE ' + QuotedStr(SearchBox1.Text+'%');
    vtMemberConsumer.Filtered:=True;

    if vtMemberConsumer.IsEmpty then begin
      DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
      with UMainModule do begin
        if qryMCQualified.Locate('AccountNumber',vtMemberConsumerAccountNumber.AsString,[]) then begin
          if qryMCQualifiedEntryMode.AsString = 'PRE-REGISTRATION' then begin
            MessageDlg('PRE-REGISTERED NA YAA, TAGAN NALANG NIYO KWARTA!', mtWarning, [mbClose],0);
            qryMCQualified.Edit;
            qryMCQualifiedEntryMode.AsString := 'VENUE-REGISTRATION';
            qryMCQualified.POST;
          end else begin
            MessageDlg('Member Consumer is Already Registered!', mtWarning, [mbClose],0);
          end;
        end else begin
          MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
        end;
      end;
    end;

    if Length(SearchBox1.Text) <= 0 then begin
      DBGridEh2.SearchPanel.SearchingText := '';
      vtMemberConsumer.Filtered:=False;
    end;
  end else begin
    vtMemberConsumer.Filtered:=False;
    vtMemberConsumer.Filter:= 'Name LIKE ' + QuotedStr('%'+SearchBox1.Text+'%');
    vtMemberConsumer.Filtered:=True;

    if vtMemberConsumer.IsEmpty then begin
      DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
      if not UMainModule.qryMCQualifiedAll.IsEmpty then begin
        if UMainModule.qryMCQualifiedEntryMode.AsString = 'PRE-REGISTRATION' then begin
          MessageDlg('PRE-REGISTERED NA YAA, TAGAN NALANG NIYO KWARTA!', mtWarning, [mbClose],0);
          UMainModule.qryMCQualified.Edit;
          UMainModule.qryMCQualifiedEntryMode.AsString := 'VENUE-REGISTRATION';
          UMainModule.qryMCQualified.POST;
        end else begin
          MessageDlg('Member Consumer is Already Registered!', mtWarning, [mbClose],0);
        end;


      end else begin
        MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
      end;
    end;

    if Length(SearchBox1.Text) <= 0 then begin
      DBGridEh2.SearchPanel.SearchingText := '';
      vtMemberConsumer.Filtered:=False;
    end;
  end;




end;

procedure TUMemberConsumer.SearchBox1DblClick(Sender: TObject);
begin
  SearchBox1.SelectAll;
  SearchBox1.ClearSelection;
end;

procedure TUMemberConsumer.RunMultipleADBCommands(const ADBCommands: array of string);
var
  Command: string;
begin
  for Command in ADBCommands do
    RunADBCommand(Command);
end;

procedure TUMemberConsumer.RefreshDBGrid1Click(Sender: TObject);
begin
  with UmainModule do begin
    qryMCQualified.Refresh;
    qryMCQualifiedAll.Refresh;
    qryMemberConsumers.Refresh;
  end;
end;

procedure TUMemberConsumer.RunADBCommand(Command: String);
const
  ADBPath = 'C:\platform-tools\adb.exe';
begin
  ShellExecute(0, nil, PChar(ADBPath), PChar(Command), nil, SW_SHOW);
end;

procedure TUMemberConsumer.RunHTMLAPI;
Var
  OutPutString : String;
  NameOutPut : String;
begin
  with TCMDPromtUtil do begin
    if isDevicesConnected then begin
      NameOutPut := GetDosOutput('adb devices');
      ShowMessage(NameOutPut);
      //OutPutString := GetDosOutput('adb -s '+  +' shell am start -a android.intent.action.VIEW -d "https://www.example.com"')
    end else begin
      ShowMessage('Failed to launch ADB');
    end;
  end;
end;

procedure TUMemberConsumer.ShellExecuteScrcpy;
const
  ScrcpyPath = 'C:\scrcpy-win64-v2.0\scrcpy.exe';
  ScrcpyArgs = '-m 1024 --disable-screensaver --always-on-top ';
  //--window-borderless --window-x=100 --window-y=100
var
  ProcessInfo: TProcessInformation;
begin
  if ShellExecute(0, nil, PChar(ScrcpyPath), PChar(ScrcpyArgs), nil, SW_HIDE) > 32 then
  begin
    ScrcpyRunning := True;
  end
  else
  begin
    ShowMessage('Failed to launch scrcpy');
  end;
end;

procedure TUMemberConsumer.ShowNotQualified1Click(Sender: TObject);
begin
  ShowNotQualified1.Checked := not ShowNotQualified1.Checked;

  if ShowNotQualified1.Checked then begin
    ShowNotQualified1.Caption := 'Hide Not Qualified';
  end else begin

    ShowNotQualified1.Caption := 'Show Not Qualified';
  end;

  with UMainModule do begin
    qryMCQualifiedAll.Filtered := False;
    if (ShowQualified1.Checked) AND (ShowNotQualified1.Checked) then begin
      //qryMCQualifiedAll.Filter := 'Status = 1 AND Status = 2 AND Status = 3 AND Status = 4' ;
      qryMCQualifiedAll.Filtered := False;
    end else if (ShowQualified1.Checked) and (not ShowNotQualified1.Checked) then  begin
      qryMCQualifiedAll.Filter := 'Status = ' + QuotedStr('1') ;
      qryMCQualifiedAll.Filtered := True;
    end else if (not ShowQualified1.Checked) and (ShowNotQualified1.Checked) then begin
      qryMCQualifiedAll.Filter := 'Status <> '+ QuotedStr('1');
      qryMCQualifiedAll.Filtered := True;
    end else begin
      qryMCQualifiedAll.Filter := 'Status = ' + QuotedStr('2') ;
      qryMCQualifiedAll.Filtered := True;
    end;

  end;
end;

procedure TUMemberConsumer.ShowQualified1Click(Sender: TObject);
begin
  ShowQualified1.Checked := not ShowQualified1.Checked;
  if ShowQualified1.Checked then begin
    ShowQualified1.Caption := 'Hide Qualified';
  end else begin

    ShowQualified1.Caption := 'Show Qualified';
  end;

  with UMainModule do begin
    qryMCQualifiedAll.Filtered := False;
    if (ShowQualified1.Checked) AND (ShowNotQualified1.Checked) then begin
      //qryMCQualifiedAll.Filter := 'Status = 1 AND Status = 2 AND Status = 3 AND Status = 4' ;
      qryMCQualifiedAll.Filtered := False;
    end else if (ShowQualified1.Checked) and (not ShowNotQualified1.Checked) then  begin
      qryMCQualifiedAll.Filter := 'Status = ' + QuotedStr('1') ;
      qryMCQualifiedAll.Filtered := True;
    end else if (not ShowQualified1.Checked) and (ShowNotQualified1.Checked) then begin
      qryMCQualifiedAll.Filter := 'Status <> '+ QuotedStr('1');
      qryMCQualifiedAll.Filtered := True;
    end else begin
      qryMCQualifiedAll.Filter := 'Status = ' + QuotedStr('5') ;
      qryMCQualifiedAll.Filtered := True;
    end;

  end;
end;

procedure TUMemberConsumer.SpeedButton1Click(Sender: TObject);
begin
  //qryCountDisconnected.Close;
  //qryCountDisconnected.ParamByName('AYear').AsInteger := CurrentYear;
  //qryCountDisconnected.Open;

  //ShowMessage(qryCountDisconnectedCountDisco.AsString);
  with UMainModule do begin
    qryCheckerPosting.Close;
    //qryCheckerPosting.ParamByName('AArea').AsString := AARea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if MessageDlg('You Are About to Post this Record' + #10#13 +
    'Are you Sure About It?',mtWarning,[mbYes,mbNo],0) = mrYes then begin
      tblNeedToBePosted.Close;
      tblNeedToBePosted.Open;
      tblNeedToBePosted.Filtered:= False;
      tblNeedToBePosted.Filter := 'Area = ' + QuotedStr(AARea) + ' AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + ' AND isPosted = 0 AND Status IN (' + QuotedStr('1') + ',' + QuotedStr('2') + ',' + QuotedStr('3') + ',' + QuotedStr('4')+')';
      tblNeedToBePosted.Filtered:= True;
      tblNeedToBePosted.First;

      qryUpdateRecord.Close;
      qryUpdateRecord.ParamByName('AYear').AsInteger := CurrentYear;
      //qryUpdateRecord.ParamByName('AArea').AsString := AARea;
      qryUpdateRecord.Execute();

      qryCheckerPosting.Close;
      //qryCheckerPosting.ParamByName('AArea').AsString := AArea;
      qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
      qryCheckerPosting.Open;
      if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
        PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
      end else begin
        PostingCounter := 0;
      end;
      Label9.Caption := IntToStr(PostingCounter);

      tblNeedToBePosted.Close;
    end else begin
      Exit;
    end;

  end;
  //MessageDlg('Error!!' + #13#10 + 'Please Call For The Designated Support Person!!',mtError,[mbClose],0);
end;

procedure TUMemberConsumer.SpeedButton2Click(Sender: TObject);
begin

  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

  with UMainModule do begin
    if AArea <> 'ALL' then begin

      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AARea) + ' AND Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;
      tblSearchMemberConsumer.First;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.Filter := 'Area = ' +QuotedStr(AARea);
      //qryCastedMemberConsumers.Filtered := True;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.Filter := 'Area = ' +QuotedStr(AARea);
      qryMCQualified.Filtered := True;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;


      qryCheckerPosting.Close;
      //qryCheckerPosting.ParamByName('AArea').AsString := 'ALL';
      qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
      qryCheckerPosting.Open;
      if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
        PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
      end else begin
        PostingCounter := 0;
      end;


    end else begin
      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;

      qryCheckerPosting.Close;
      //qryCheckerPosting.ParamByName('AArea').AsString := 'ALL';
      qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
      qryCheckerPosting.Open;
      if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
        PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
      end else begin
        PostingCounter := 0;
      end;
    end;

  end;
end;

procedure TUMemberConsumer.SpeedButton3Click(Sender: TObject);
Var
  FileNameLocation : String;
begin
  FileNameLocation := Operations(AArea);
  FDBatchMoveTextWriter1.FileName := FileNameLocation;
  with UMainModule do begin
    qryCheckerPosting.Close;
    //qryCheckerPosting.ParamByName('AArea').AsString := AARea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    qryCheckerPosting.First;
    if MessageDlg('You Are About to Extract this Record As CSV File' + #10#13 +
    'Are you Sure About It?',mtWarning,[mbYes,mbNo],0) = mrYes then begin
      tblNeedToBePosted.Close;
      tblNeedToBePosted.Open;
      tblNeedToBePosted.Filtered:= False;
      tblNeedToBePosted.Filter := 'Area = ' + QuotedStr(AARea) + ' AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + 'AND Status IN (' + QuotedStr('1') + ',' +  QuotedStr('2') + ',' + QuotedStr('3') + ',' + QuotedStr('4')+')';
      tblNeedToBePosted.Filtered:= True;
      tblNeedToBePosted.First;
    end else begin
      Exit;
    end;

    FDBatchMoveTextWriter1.FileName := ExtractFileDir((ParamStr(0))) + '\' + IntToStr(CurrentYear) + '\' + AArea + '.csv';

    FDBatchMove2.Execute;

    qryUpdateRecord.Close;
    qryUpdateRecord.ParamByName('AYear').AsInteger := CurrentYear;
    //qryUpdateRecord.ParamByName('AArea').AsString := AARea;
    qryUpdateRecord.Execute();

    qryCheckerPosting.Close;
    //qryCheckerPosting.ParamByName('AArea').AsString := AArea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
      PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
    end else begin
      PostingCounter := 0;
    end;
    Label9.Caption := IntToStr(PostingCounter);



  end;
end;

procedure TUMemberConsumer.Timer1Timer(Sender: TObject);
begin
  if PostingCounter>=1 then begin
    MessageDlg('This is A Reminder to Post Your Record' + #13#10 + 'Or You Can Call the Designated Support Person!!' + #13#10 + 'For Extracting the Data!',mtError,[mbClose],0);
  end;
end;

procedure TUMemberConsumer.UsbArrivalTimerTimer(Sender: TObject);
var
  DriveList: TStrings;
  DriveName: string;
  i: integer;
begin
  UsbArrivalTimer.Enabled := false;

  IntializeComPort;

end;

procedure TUMemberConsumer.UsbRemovalTimerTimer(Sender: TObject);
var DriveLetter:String;
begin
  UsbRemovalTimer.Enabled := False;
  IntializeComPort;
end;

procedure TUMemberConsumer.USBRemoval(Sender: TObject);
begin
 UsbRemovalTimer.Enabled := true;
end;

procedure TUMemberConsumer.USBArrival(Sender: TObject);
begin
  UsbArrivalTimer.Enabled := true;
end;

end.
