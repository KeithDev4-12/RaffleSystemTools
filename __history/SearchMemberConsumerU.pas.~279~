unit SearchMemberConsumerU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, DBGridEhGrouping, ToolCtrlsEh,
  DBGridEhToolCtrls, DynVarsEh, Vcl.StdCtrls, Vcl.WinXCtrls, EhLibVCL, GridsEh,
  DBAxisGridsEh, DBGridEh, Data.DB, Vcl.ExtCtrls,System.Math, Vcl.Buttons,
  FireDAC.Comp.BatchMove.DataSet, FireDAC.Comp.BatchMove, FireDAC.Stan.Intf,
  MemDS, VirtualTable, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  FireDAC.Comp.BatchMove.Text,System.IOUtils, Vcl.Menus,System.StrUtils;

type
  TUMemberConsumer = class(TForm)
    DSMemberConsumer: TDataSource;
    Panel1: TPanel;
    Panel2: TPanel;
    Label1: TLabel;
    DBGridEh1: TDBGridEh;
    SearchBox1: TSearchBox;
    Label2: TLabel;
    Panel3: TPanel;
    ComboBox1: TComboBox;
    GroupBox1: TGroupBox;
    DBGridEh2: TDBGridEh;
    Panel4: TPanel;
    Label3: TLabel;
    lblNoOfEntry: TLabel;
    DSDataEntries: TDataSource;
    Panel5: TPanel;
    GroupBox2: TGroupBox;
    Panel6: TPanel;
    Label4: TLabel;
    Panel7: TPanel;
    Label5: TLabel;
    Panel8: TPanel;
    Label6: TLabel;
    Panel9: TPanel;
    Label7: TLabel;
    Label8: TLabel;
    SpeedButton1: TSpeedButton;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    vtMemberConsumer: TVirtualTable;
    FDBatchMove1: TFDBatchMove;
    FDBatchMoveDataSetReader1: TFDBatchMoveDataSetReader;
    FDBatchMoveDataSetWriter1: TFDBatchMoveDataSetWriter;
    qryCountDisconnected: TFDQuery;
    qryCountDisconnectedCountDisco: TLargeintField;
    Panel10: TPanel;
    SpeedButton2: TSpeedButton;
    Shape2: TShape;
    SpeedButton3: TSpeedButton;
    FDBatchMove2: TFDBatchMove;
    FDBatchMoveDataSetReader2: TFDBatchMoveDataSetReader;
    FDBatchMoveTextWriter1: TFDBatchMoveTextWriter;
    Shape1: TShape;
    Timer1: TTimer;
    PopupMenu1: TPopupMenu;
    DeleteSelectedRecord1: TMenuItem;
    N1: TMenuItem;
    ExportAsCSVFile1: TMenuItem;
    Panel11: TPanel;
    Label12: TLabel;
    Shape3: TShape;
    vtMemberConsumerid: TAutoIncField;
    vtMemberConsumerAccountNumber: TStringField;
    vtMemberConsumerName: TStringField;
    vtMemberConsumerArea: TStringField;
    vtMemberConsumerAddress: TStringField;
    vtMemberConsumerStatus: TIntegerField;
    vtMemberConsumerShuffleOrder: TIntegerField;
    vtMemberConsumerConnectionStatus: TLongWordField;
    vtMemberConsumerEntryMode: TStringField;
    vtMemberConsumerYear: TLongWordField;
    vtMemberConsumerGender: TStringField;
    vtMemberConsumerisPosted: TLongWordField;
    vtMemberConsumerRateCode: TStringField;
    procedure SearchBox1Change(Sender: TObject);
    procedure DBGridEh1KeyPress(Sender: TObject; var Key: Char);
    procedure FormShow(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBGridEh1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure DBGridEh1DblClick(Sender: TObject);
    procedure DSDataEntriesDataChange(Sender: TObject; Field: TField);
    procedure DSMemberConsumerDataChange(Sender: TObject; Field: TField);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    function Operations(AArea:String):String;
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Timer1Timer(Sender: TObject);
    procedure DeleteSelectedRecord1Click(Sender: TObject);
    procedure DBGridEh2DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure SearchBox1DblClick(Sender: TObject);
  private
    { Private declarations }
    var AArea : String;
    var AAreaName : String;
  public
    { Public declarations }
  end;

var
  UMemberConsumer: TUMemberConsumer;
  PostingCounter:Integer;

implementation

{$R *.dfm}

Uses MainModuleU;

procedure TUMemberConsumer.ComboBox1Change(Sender: TObject);
begin
  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

  with UMainModule do begin
    if AArea <> 'ALL' then begin

      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AARea) + ' AND Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;
      tblSearchMemberConsumer.First;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.Filter := 'Area = ' +QuotedStr(AARea);
      //qryCastedMemberConsumers.Filtered := True;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.Filter := 'Area = ' +QuotedStr(AARea);
      qryMCQualified.Filtered := True;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;
    end else begin
      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;
    end;
    
  end;
end;

procedure TUMemberConsumer.DBGridEh1DblClick(Sender: TObject);
begin
  with UMainModule do begin
    if qryMemberConsumers.Locate('AccountNumber',vtMemberConsumerAccountNumber.AsString,[]) then begin
      if vtMemberConsumerConnectionStatus.AsInteger = 1 then begin
        if MessageDlg('You Are About to Put this Consumer to the Raffle Entry!!' + #10#13 +
        'Account Number  : ' + vtMemberConsumerAccountNumber.AsString + #10#13 +
        'Account Name    : ' + vtMemberConsumerName.AsString + #10#13 +
        'With Address of : ' + vtMemberConsumerAddress.AsString,mtWarning,[mbYes,mbNo],0) = mrYes then begin
          if (vtMemberConsumerRateCode.AsString = 'R') OR (vtMemberConsumerRateCode.AsString = 'C') then begin
            qryMemberConsumers.Edit;
            qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
            qryMemberConsumersStatus.AsInteger := 1;
            qryMemberConsumers.Post;
            PostingCounter := PostingCounter + 1;
            // 1 = Active Consumers
          end else begin
            qryMemberConsumers.Edit;
            qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
            qryMemberConsumersStatus.AsInteger := 3;
            qryMemberConsumers.Post;
            PostingCounter := PostingCounter + 1;
          end;
        end else begin
          Exit;
        end;
      end else begin
        if MessageDlg('This Consumer is Disconnected or Disco-Vacant!!' + #10#13 +
        'He/She can Still be part of This Event but,'+ #10#13 +
        'Cannot be Part of the Raffle Draw!!' + #10#13,mtWarning,[mbYes,mbNo],0) = mrYes then begin
          qryMemberConsumers.Edit;
          qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
          qryMemberConsumersStatus.AsInteger := 3;
          // 3 = Disconnected but cannot be part of Raffle Draw
          qryMemberConsumers.Post;
          PostingCounter := PostingCounter + 1;
        end else begin
          Exit;
        end;
      end;
      vtMemberConsumer.Delete;
      Label9.Caption := IntToStr(PostingCounter);
      qryMemberConsumers.Refresh;
      //qryCastedMemberConsumers.Refresh;
      qryMCQualified.Refresh;
    end;
  end;
end;

procedure TUMemberConsumer.DBGridEh1DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumnEh;
  State: TGridDrawState);
begin
  With UMainModule do begin
     if vtMemberConsumerConnectionStatus.AsString = '2' then begin
       DBGridEh1.Canvas.Brush.Color:=clRed;
     end else if vtMemberConsumerConnectionStatus.AsString = '3' then begin
       DBGridEh1.Canvas.Brush.Color:=clHighlight;
     end;

     DBGridEh1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;

end;

procedure TUMemberConsumer.DBGridEh1KeyPress(Sender: TObject; var Key: Char);
begin
  if Key in [#13] then begin
    with UMainModule do begin
      if qryMemberConsumers.Locate('AccountNumber',vtMemberConsumerAccountNumber.AsString,[]) then begin
        if vtMemberConsumerConnectionStatus.AsInteger = 1 then begin
          if MessageDlg('You Are About to Put this Consumer to the Raffle Entry!!' + #10#13 +
          'Account Number  : ' + vtMemberConsumerAccountNumber.AsString + #10#13 +
          'Account Name    : ' + vtMemberConsumerName.AsString + #10#13 +
          'With Address of : ' + vtMemberConsumerAddress.AsString,mtWarning,[mbYes,mbNo],0) = mrYes then begin
            if (vtMemberConsumerRateCode.AsString = 'R') OR (vtMemberConsumerRateCode.AsString = 'C') then begin
              qryMemberConsumers.Edit;
              qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
              qryMemberConsumersStatus.AsInteger := 1;
              qryMemberConsumers.Post;
              PostingCounter := PostingCounter + 1;
              // 1 = Active Consumers
            end else begin
              qryMemberConsumers.Edit;
              qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
              qryMemberConsumersStatus.AsInteger := 3;
              qryMemberConsumers.Post;
              PostingCounter := PostingCounter + 1;
            end;
          end;
        end else begin
          if MessageDlg('This Consumer is Disconnected or Disco-Vacant!!' + #10#13 +
          'He/She can Still be part of This Event but,'+ #10#13 +
          'Cannot be Part of the Raffle Draw!!' + #10#13,mtWarning,[mbYes,mbNo],0) = mrYes then begin
            qryMemberConsumers.Edit;
            qryMemberConsumersShuffleOrder.AsInteger := (RandomRange(1, 99999));
            qryMemberConsumersStatus.AsInteger := 3;
            // 3 = Disconnected but cannot be part of Raffle Draw
            qryMemberConsumers.Post;
            PostingCounter := PostingCounter + 1;
          end;
        end;
        vtMemberConsumer.Delete;

        qryMemberConsumers.Refresh;
        //qryCastedMemberConsumers.Refresh;
        qryMCQualified.Refresh;
      end;
    end;
  end;
end;

procedure TUMemberConsumer.DBGridEh2DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumnEh;
  State: TGridDrawState);
begin
  With UMainModule do begin
     if qryMCQualifiedisPosted.AsString = '0' then begin
       DBGridEh2.Canvas.Brush.Color:=clGray;
     end;
     DBGridEh2.DefaultDrawColumnCell(Rect, DataCol, Column, State);
  end;
end;

procedure TUMemberConsumer.DeleteSelectedRecord1Click(Sender: TObject);
Var
  AccountNumber : String;
begin
  if MessageDlg ('Are you Sure you want to Delete this Record?'+
  #13#10+
  'AccountNumber :' + UMainModule.qryMCQualifiedAccountNumber.AsString +#13#10+
  'Name :' + UMainModule.qryMCQualifiedName.AsString +#13#10+
  'Address :' + UMainModule.qryMCQualifiedAddress.AsString,
   mtConfirmation, [mbYes, mbNo], 0) = mrYes then begin
     with UMainModule do begin
       AccountNumber := qryMCQualifiedAccountNumber.AsString;
       if tblSearchMemberConsumer.Locate('AccountNumber',AccountNumber,[]) then begin
           if tblSearchMemberConsumerisPosted.AsInteger = 0 then begin
           qryMCQualified.Locate('AccountNumber',AccountNumber,[]);
           qryMCQualified.Edit;
           qryMCQualifiedStatus.AsInteger := 0;
           qryMCQualified.Post;
           qryMCQualified.Refresh;

           vtMemberConsumer.Append;
           vtMemberConsumerAccountNumber.AsString := tblSearchMemberConsumerAccountNumber.AsString;
           vtMemberConsumerName.AsString := tblSearchMemberConsumerName.AsString;
           vtMemberConsumerArea.AsString := tblSearchMemberConsumerArea.AsString;
           vtMemberConsumerAddress.AsString := tblSearchMemberConsumerAddress.AsString;
           vtMemberConsumerStatus.AsInteger := tblSearchMemberConsumerStatus.AsInteger;
           vtMemberConsumerShuffleOrder.AsInteger := tblSearchMemberConsumerShuffleOrder.AsInteger;
           vtMemberConsumerConnectionStatus.AsString := tblSearchMemberConsumerConnectionStatus.AsString;
           vtMemberConsumerYear.AsInteger := tblSearchMemberConsumerYear.AsInteger;
           vtMemberConsumerEntryMode.AsString := tblSearchMemberConsumerEntryMode.AsString;
           vtMemberConsumerGender.AsString := tblSearchMemberConsumerGender.AsString;
           vtMemberConsumerisPosted.AsInteger := 0;
           vtMemberConsumer.Post;
           PostingCounter := PostingCounter -1;
         end;
       end else begin
         MessageDlg ('You Cannot Delete A Posted Record!',mtInformation, [mbYes, mbNo], 0);
       end;
     end;
   end;
end;

procedure TUMemberConsumer.DSDataEntriesDataChange(Sender: TObject;
  Field: TField);
begin
  lblNoOfEntry.Caption := FormatCurr('#,##0.00',(UMainModule.qryMCQualified.RecordCount));
end;

procedure TUMemberConsumer.DSMemberConsumerDataChange(Sender: TObject;
  Field: TField);
begin
  Label8.Caption := FormatCurr('#,##0.00',(vtMemberConsumer.RecordCount));
end;



procedure TUMemberConsumer.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if MessageDlg ('Before Exiting to this Form You Need to Post Entry Record!!',
   mtConfirmation, [mbOK, mbNo], 0) = mrNo then begin
     CanClose := False;
   end else begin
     if PostingCounter>=1 then begin
       CanClose := False;
       MessageDlg('Please Call For The Designated Support Person!!',mtError,[mbClose],0);
     end else begin
       CanClose := True;

     end;
   end;
end;

procedure TUMemberConsumer.FormCreate(Sender: TObject);
begin
  AARea := 'ALL';
end;

procedure TUMemberConsumer.FormShow(Sender: TObject);
begin
  With UMainModule do begin
    AArea := UMainModule.ReadIniFile();
  Timer1.Enabled := True;
  if AArea = 'ALL' then begin
    AAreaName := '<ALL MUNICIPALITIES>';
  end else if AArea = '001' then begin
    AAreaName := 'BULAN';
  end else if AArea = '002' then begin
    AAreaName := 'MATNOG';
  end else if AArea = '003' then begin
    AAreaName := 'STA. MAGDALENA';
  end else if AArea = '004' then begin
    AAreaName := 'IROSIN';
  end else if AArea = '005' then begin
    AAreaName := 'BULUSAN';
  end else if AArea = '006' then begin
    AAreaName := 'JUBAN';
  end else if AArea = '007' then begin
    AAreaName := 'CASIGURAN';
  end else if AArea = '008' then begin
    AAreaName := 'MAGALLANES';
  end;

  Combobox1.ItemIndex :=  ComboBox1.Items.IndexOf(AAreaName);

    tblSearchMemberConsumer.Close;
    tblSearchMemberConsumer.Open;
    tblSearchMemberConsumer.Filtered := False;
    tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AArea) + 'AND Year = ' + QuotedStr('2023') + ' AND Status = 0';
    tblSearchMemberConsumer.Filtered := True;
    tblSearchMemberConsumer.First;

    qryMemberConsumers.Close;
    qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryMemberConsumers.Open;
    qryMemberConsumers.First;

    qryCastedMemberConsumers.Close;
    qryCastedMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryCastedMemberConsumers.Open;
    qryCastedMemberConsumers.First;

    qryMCQualified.Close;
    qryMCQualified.ParamByName('AArea').AsString := AArea;
    qryMCQualified.ParamByName('AYear').AsInteger := CurrentYear;
    qryMCQualified.Open;
    qryMCQualified.First;
    vtMemberConsumer.Clear;
    FDBatchMove1.Execute;
    vtMemberConsumer.Open;

    qryCheckerPosting.Close;
    qryCheckerPosting.ParamByName('AArea').AsString := AArea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
      PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
    end else begin
      PostingCounter := 0;
    end;
    Label9.Caption := IntToStr(PostingCounter);
  end;
end;

function TUMemberConsumer.Operations(AArea:String):String;
Var
  FileName : String;
  FileDefault : String;
  FilePath : String;
begin
  try
    { Copy file from source file path to destination file path }

    FileDefault := ExtractFilePath(Application.ExeName) + 'AGMA_AREACODE.csv';
    FileName := ExtractFilePath(Application.ExeName) + 'AGMA_'+AArea + '.csv';
    FilePath := ExtractFilePath(Application.ExeName);

    if FileExists(FileName) then begin
       TFile.Delete(FileName);
    end;

    if FileExists(FileDefault) then begin
       TFile.Copy(FileDefault, FilePath+'AGMA_' + AArea + '.csv');
    end;

    if FileExists(FilePath + 'AGMA_AREACODE - Copy.csv') then begin
      RenameFile(FilePath + 'AGMA_AREACODE - Copy.csv',FilePath + 'AGMA_' + AArea + '.csv');
    end;

    //if FileExists(FileName) then begin
    //   Result := FilePath + 'AGMA_' + AArea + '.csv';
    //end else begin
    //   ShowMessage('Quick Fix Please Call the Designated Support Person!, And He Will need to Copy the Existed Data CSV File in the Directory!')
    //end;

    Result := FilePath + 'AGMA_' + AArea + '.csv';
  except
    MessageDlg('Incorrect path' + #13#10 + 'Call IT Stand By!', mtError, [mbOK], 0);
    Exit;
  end;
end;

procedure TUMemberConsumer.SearchBox1Change(Sender: TObject);
begin
  //DBGridEh1.SearchPanel.SearchingText := SearchBox1.Text;

  //if UMainModule.qryCastedMemberConsumers.IsEmpty then begin
  //  DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
  //  if not UMainModule.qryMCQualified.IsEmpty then begin
  //    MessageDlg('Member Consumer is Already Registered!', mtInformation, [mbClose],0);
  //  end else begin
  //    MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
  //  end;
  //end;

  //if Length(SearchBox1.Text) <= 0 then begin
  //  DBGridEh2.SearchPanel.SearchingText := '';
  //end;
  if RadioButton1.Checked then begin
    vtMemberConsumer.Filtered:=False;
    vtMemberConsumer.Filter:= 'AccountNumber LIKE ' + QuotedStr(SearchBox1.Text+'%');
    vtMemberConsumer.Filtered:=True;

    if vtMemberConsumer.IsEmpty then begin
      DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
      if not UMainModule.qryMCQualified.IsEmpty then begin
        MessageDlg('Member Consumer is Already Registered!', mtInformation, [mbClose],0);
      end else begin
        MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
      end;
    end;

    if Length(SearchBox1.Text) <= 0 then begin
      DBGridEh2.SearchPanel.SearchingText := '';
      vtMemberConsumer.Filtered:=False;
    end;
  end else begin
    vtMemberConsumer.Filtered:=False;
    vtMemberConsumer.Filter:= 'Name LIKE ' + QuotedStr('%'+SearchBox1.Text+'%');
    vtMemberConsumer.Filtered:=True;

    if vtMemberConsumer.IsEmpty then begin
      DBGridEh2.SearchPanel.SearchingText := SearchBox1.Text;
      if not UMainModule.qryMCQualified.IsEmpty then begin
        MessageDlg('Member Consumer is Already Registered!', mtInformation, [mbClose],0);
      end else begin
        MessageDlg('Member Consumer is Not Valid!', mtError, [mbClose],0);
      end;
    end;

    if Length(SearchBox1.Text) <= 0 then begin
      DBGridEh2.SearchPanel.SearchingText := '';
      vtMemberConsumer.Filtered:=False;
    end;
  end;




end;

procedure TUMemberConsumer.SearchBox1DblClick(Sender: TObject);
begin
  SearchBox1.SelectAll;
  SearchBox1.ClearSelection;
end;

procedure TUMemberConsumer.SpeedButton1Click(Sender: TObject);
begin
  //qryCountDisconnected.Close;
  //qryCountDisconnected.ParamByName('AYear').AsInteger := CurrentYear;
  //qryCountDisconnected.Open;

  //ShowMessage(qryCountDisconnectedCountDisco.AsString);
  {with UMainModule do begin
    qryCheckerPosting.Close;
    qryCheckerPosting.ParamByName('AArea').AsString := AARea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if MessageDlg('You Are About to Post this Record' + #10#13 +
    'Are you Sure About It?',mtWarning,[mbYes,mbNo],0) = mrYes then begin
      tblNeedToBePosted.Close;
      tblNeedToBePosted.Open;
      tblNeedToBePosted.Filtered:= False;
      tblNeedToBePosted.Filter := 'Area = ' + QuotedStr(AARea) + ' AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + ' AND isPosted = 0 AND Status IN (' + QuotedStr('1') + ',' + QuotedStr('3') + ',' + QuotedStr('4')+')';
      tblNeedToBePosted.Filtered:= True;
      tblNeedToBePosted.First;
      while not tblNeedToBePosted.Eof do begin


      end;

      tblNeedToBePosted.Close;
    end else begin
      Exit;
    end;

  end;    }
  MessageDlg('Error!!' + #13#10 + 'Please Call For The Designated Support Person!!',mtError,[mbClose],0);
end;

procedure TUMemberConsumer.SpeedButton2Click(Sender: TObject);
begin

  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

  with UMainModule do begin
    if AArea <> 'ALL' then begin

      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Area = ' +QuotedStr(AARea) + ' AND Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;
      tblSearchMemberConsumer.First;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.Filter := 'Area = ' +QuotedStr(AARea);
      //qryCastedMemberConsumers.Filtered := True;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.Filter := 'Area = ' +QuotedStr(AARea);
      qryMCQualified.Filtered := True;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;


      qryCheckerPosting.Close;
      qryCheckerPosting.ParamByName('AArea').AsString := 'ALL';
      qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
      qryCheckerPosting.Open;
      if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
        PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
      end else begin
        PostingCounter := 0;
      end;


    end else begin
      tblSearchMemberConsumer.Filtered := False;
      tblSearchMemberConsumer.Filter := 'Year = ' + QuotedStr('2023') + ' AND Status = 0';
      tblSearchMemberConsumer.Filtered := True;

      //qryCastedMemberConsumers.Filtered := False;
      //qryCastedMemberConsumers.First;

      qryMCQualified.Filtered := False;
      qryMCQualified.First;

      vtMemberConsumer.Clear;
      FDBatchMove1.Execute;
      vtMemberConsumer.Open;

      qryCheckerPosting.Close;
      qryCheckerPosting.ParamByName('AArea').AsString := 'ALL';
      qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
      qryCheckerPosting.Open;
      if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
        PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
      end else begin
        PostingCounter := 0;
      end;
    end;

  end;
end;

procedure TUMemberConsumer.SpeedButton3Click(Sender: TObject);
Var
  FileNameLocation : String;
begin
  FileNameLocation := Operations(AArea);
  FDBatchMoveTextWriter1.FileName := FileNameLocation;
  with UMainModule do begin
    qryCheckerPosting.Close;
    qryCheckerPosting.ParamByName('AArea').AsString := AARea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    qryCheckerPosting.First;
    if MessageDlg('You Are About to Extract this Record As CSV File' + #10#13 +
    'Are you Sure About It?',mtWarning,[mbYes,mbNo],0) = mrYes then begin
      tblNeedToBePosted.Close;
      tblNeedToBePosted.Open;
      tblNeedToBePosted.Filtered:= False;
      tblNeedToBePosted.Filter := 'Area = ' + QuotedStr(AARea) + ' AND Year = ' + QuotedStr(IntToStr(CurrentYear)) + 'AND Status IN (' + QuotedStr('1') + ',' + QuotedStr('3') + ',' + QuotedStr('4')+')';
      tblNeedToBePosted.Filtered:= True;
      tblNeedToBePosted.First;
    end else begin
      Exit;
    end;

    FDBatchMove2.Execute;

    qryUpdateRecord.Close;
    qryUpdateRecord.ParamByName('AYear').AsInteger := CurrentYear;
    qryUpdateRecord.ParamByName('AArea').AsString := AARea;
    qryUpdateRecord.Execute();

    qryCheckerPosting.Close;
    qryCheckerPosting.ParamByName('AArea').AsString := AArea;
    qryCheckerPosting.ParamByName('AYear').AsInteger := CurrentYear;
    qryCheckerPosting.Open;
    if qryCheckerPostingcntDataNotPosted.AsInteger > 0 then begin
      PostingCounter := qryCheckerPostingcntDataNotPosted.AsInteger;
    end else begin
      PostingCounter := 0;
    end;
    Label9.Caption := IntToStr(PostingCounter);



  end;
end;

procedure TUMemberConsumer.Timer1Timer(Sender: TObject);
begin
  if PostingCounter>=1 then begin
    MessageDlg('This is A Reminder to Post Your Record' + #13#10 + 'Or You Can Call the Designated Support Person!!' + #13#10 + 'For Extracting the Data!',mtError,[mbClose],0);
  end;
end;

end.
