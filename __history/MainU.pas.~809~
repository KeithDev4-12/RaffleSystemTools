unit MainU;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.StdCtrls, DBGridEhGrouping, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh,
  EhLibVCL, GridsEh, DBAxisGridsEh, DBGridEh, Data.DB, Vcl.Imaging.GIFImg,
  dxGDIPlusClasses,System.Math, MemDS, VirtualTable,System.StrUtils, mmsystem,
  Vcl.MPlayer, SpeechLib_TLB, Vcl.OleServer,ShellAPI,IdHTTP, System.JSON,
  System.Net.HttpClient,  System.Generics.Collections, CPort,Soap.EncdDecd,
  RzStatus;

type
  TUMainForm = class(TForm)
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    Refresh1: TMenuItem;
    SearchMemberConsumers1: TMenuItem;
    N1: TMenuItem;
    UploadMemberConsumers1: TMenuItem;
    GetFromCooptoLocalData1: TMenuItem;
    Panel1: TPanel;
    Panel3: TPanel;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    Shape1: TShape;
    Shape2: TShape;
    Panel4: TPanel;
    Panel2: TPanel;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    Shape3: TShape;
    Shape4: TShape;
    Panel6: TPanel;
    Panel7: TPanel;
    Panel8: TPanel;
    Label1: TLabel;
    Panel9: TPanel;
    ComboBox1: TComboBox;
    DBGridEh1: TDBGridEh;
    DSActiveMemberConsumer: TDataSource;
    VT: TVirtualTable;
    DataSource1: TDataSource;
    SpeedButton6: TSpeedButton;
    Shape5: TShape;
    N2: TMenuItem;
    Hide1: TMenuItem;
    Panel10: TPanel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Panel12: TPanel;
    SpeedButton8: TSpeedButton;
    Shape6: TShape;
    SpeedButton9: TSpeedButton;
    Shape8: TShape;
    Panel14: TPanel;
    DBGridEh4: TDBGridEh;
    Panel15: TPanel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Image5: TImage;
    DSWinnerMemberConsumer: TDataSource;
    SpeedButton7: TSpeedButton;
    Shape7: TShape;
    Winner1: TMenuItem;
    mpBackGround: TMediaPlayer;
    mpSpinningWheel: TMediaPlayer;
    //SpVoice1: TSpVoice;
    SpeechSettings1: TMenuItem;
    Reports1: TMenuItem;
    AllAttendie1: TMenuItem;
    AllWinners1: TMenuItem;
    N3: TMenuItem;
    est1: TMenuItem;
    GenderTester1: TMenuItem;
    ReGenderize1: TMenuItem;
    Summary1: TMenuItem;
    Timer2: TTimer;
    AllWinnersPerClassification1: TMenuItem;
    SpVoice1: TSpVoice;
    pnlRaffleTemplate: TPanel;
    VTAccountNumber: TStringField;
    VTName: TStringField;
    VTAddress: TStringField;
    Label6: TLabel;
    Label7: TLabel;
    UpdateLocalDatabaseFromOnlineDatabase1: TMenuItem;
    DemoDummy1: TMenuItem;
    RzVersionInfo1: TRzVersionInfo;
    AllWinnersPerClassificationGrandPrize1: TMenuItem;
    CheckBox1: TCheckBox;
    procedure SpeedButton2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure GetFromCooptoLocalData1Click(Sender: TObject);
    procedure SpeedButton6Click(Sender: TObject);
    procedure SpeedButton4Click(Sender: TObject);
    procedure SearchMemberConsumers1Click(Sender: TObject);
    procedure N2Click(Sender: TObject);
    procedure Refresh1Click(Sender: TObject);
    procedure Hide1Click(Sender: TObject);
    procedure DataSource1DataChange(Sender: TObject; Field: TField);
    procedure Image2MouseEnter(Sender: TObject);
    procedure SpeedButton7Click(Sender: TObject);
    procedure Winner1Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    procedure SpeedButton8Click(Sender: TObject);
    procedure UploadMemberConsumers1Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure mpBackGroundNotify(Sender: TObject);
    procedure CreateABatchFile(AAccountNumber,AName:String);
    procedure AllAttendie1Click(Sender: TObject);
    procedure Label4Click(Sender: TObject);
    procedure est1Click(Sender: TObject);
    function isSpeakerAvailable():Boolean;
    function FetchAndPopulateImage(Const AccountNumber:String):Integer;
    function GetGenderOfFirstName(const firstName: string; const apiKey: string): string;
    function GetGendersOfFirstNames(const firstNames: String
    // const apiKey: string
    ): TDictionary<string,string>;
    function GetGenderOfFirstNames(const firstName: string
    //; const apiKey: string
    ): string;
    procedure GenderTester1Click(Sender: TObject);
    procedure ReGenderize1Click(Sender: TObject);
    procedure AllWinners1Click(Sender: TObject);
    procedure Summary1Click(Sender: TObject);
    procedure Timer2Timer(Sender: TObject);
    procedure AllWinnersPerClassification1Click(Sender: TObject);
    procedure SpeechSettings1Click(Sender: TObject);
    function IsQualified(Const AAccountNumber:String):Integer;
    function IsPictureAvailable(Const AAccountNumber:String):Integer;
    procedure UpdateLocalDatabaseFromOnlineDatabase1Click(Sender: TObject);
    function GetFirstLetterOfLastWord(const S: string): Char;
    function GetAllWordsExceptLast(const S: string): string;
    procedure DemoDummy1Click(Sender: TObject);
    procedure AllWinnersPerClassificationGrandPrize1Click(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure PrizeCategory(Sender: TObject);

  private
    { Private declarations }

  public
    { Public declarations }
    var AArea : String;
    var AAreaName : String;
    var I : Integer;
    Var SecLength:Integer;
    var TickInterval:Integer;
    var ALanguage:Integer;
    var AGender:Integer;
    var ClickCounter:Integer;
    var secondCount :Integer;
    var DefaultSQL : TStrings;
    var isRaffleTemplateCreated: Boolean;
    var IsOnRaffle :Boolean;
    var APrizeCategoryValue : String;
  end;

var
  UMainForm: TUMainForm;

implementation

{$R *.dfm}

Uses MainModuleU,SearchMemberConsumerU,WinnerU,UploaderPreRegistrationU, LogInU,
     ReportU,RaffleTemplate1,RaffleTemplate2,SettingsU,UpdateDatabase;

procedure TUMainForm.AllAttendie1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      {qryReportAttendance.Close;
      qryReportAttendance.ParamByName('AYear').AsString := value;
      qryReportAttendance.Open;
      qryReportAttendance.First;
      qrlblDateRange.Caption := 'Y.R. ' + value;
      qrAttendance.Preview;}

      qryAGMAAttendance.Close;
      qryAGMAAttendance.ParamByName('AYear').AsString := value;
      qryAGMAAttendance.Open;
      qryAGMAAttendance.First;
      QRPLabel46.Caption := 'Y.R. ' + value;
      AGMAAttendance.Preview;

    end;
  end;
end;

procedure TUMainForm.AllWinners1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryReportWinners.Close;
      qryReportWinners.ParamByName('AYear').AsString := value;
      qryReportWinners.Open;
      qryReportWinners.First;
      QRPLabel13.Caption := 'Y.R. ' + value;
      qrWinner.Preview;
    end;
  end;
end;

procedure TUMainForm.AllWinnersPerClassification1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryVicinity.Close;
      qryVicinity.ParamByName('AClassification').AsString :=  '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryVicinity.Open;
      qryVicinity.First;
      qryReportWinnersClassification.Close;
      qryReportWinnersClassification.ParamByName('AYear').AsInteger := StrToInt(SplitString(value,'|')[1]);
      qryReportWinnersClassification.ParamByName('AClassification').AsString := '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryReportWinnersClassification.ParamByName('APrizeCategory').AsString := 'Consolation';
      qryReportWinnersClassification.Open;
      qryReportWinnersClassification.First;
      qryReportWinnersClassification.First;
      QRPLabel34.Caption := 'AGMA WINNERS ' +UpperCase(SplitString(value,'|')[0]);
      QRPLabel35.Caption := 'Y.R. ' + SplitString(value,'|')[1];
      qrWinnersByClassification.Preview;
    end;
  end;
end;

procedure TUMainForm.AllWinnersPerClassificationGrandPrize1Click(
  Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qryVicinity.Close;
      qryVicinity.ParamByName('AClassification').AsString :=  '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryVicinity.Open;
      qryVicinity.First;
      qryReportWinnersClassification.Close;
      qryReportWinnersClassification.ParamByName('AYear').AsInteger := StrToInt(SplitString(value,'|')[1]);
      qryReportWinnersClassification.ParamByName('AClassification').AsString := '%' + UPPERCASE(SplitString(value,'|')[0]) + '%';
      qryReportWinnersClassification.ParamByName('APrizeCategory').AsString := 'Grand';
      qryReportWinnersClassification.Open;
      qryReportWinnersClassification.First;
      qryReportWinnersClassification.First;
      QRPLabel34.Caption := 'AGMA WINNERS ' +UpperCase(SplitString(value,'|')[0]);
      QRPLabel35.Caption := 'Y.R. ' + SplitString(value,'|')[1];
      qrWinnersByClassification.Preview;
    end;
  end;
end;

procedure TUMainForm.CheckBox1Click(Sender: TObject);
begin
  PrizeCategory(Sender);
  //ShowMessage(APrizeCategoryValue);
end;

procedure TUMainForm.ComboBox1Change(Sender: TObject);
begin
 Timer2.Enabled := True;
  if Combobox1.ItemIndex = 0 then begin
    AARea := 'ALL';
  end else if Combobox1.ItemIndex = 1 then begin
    AARea := '001';
  end else if Combobox1.ItemIndex = 2 then begin
    AARea := '002';
  end else if Combobox1.ItemIndex = 3 then begin
    AARea := '003';
  end else if Combobox1.ItemIndex = 4 then begin
    AARea := '004';
  end else if Combobox1.ItemIndex = 5 then begin
    AARea := '005';
  end else if Combobox1.ItemIndex = 6 then begin
    AARea := '006';
  end else if Combobox1.ItemIndex = 7 then begin
    AARea := '007';
  end else begin
    AARea := '008';
  end;

   with UMainModule do begin
     qrySettings.Close;
     qrySettings.Open;
     qrySettings.First;
     if qrySettingsTheme.AsString.Contains('1')  then begin
       //RaffleTemplate1U := TRaffleTemplate1U.Create(Application);
       //RaffleTemplate1U.ShowInPanel(pnlRaffleTemplate);
     end else if qrySettingsTheme.AsString.Contains('2')  then begin
       RaffleTemplate2U.Label4.Caption := StringReplace(StringReplace(ComboBox1.Text,'<','',[rfReplaceAll, rfIgnoreCase]),'>','',[rfReplaceAll, rfIgnoreCase]);
     end;
   end;

  SpeedButton6Click(Sender);
end;

procedure TUMainForm.CreateABatchFile(AAccountNumber,AName:String);
var
  BatchList: TStringList;
begin
  // Create a new TStringList object
  BatchList := TStringList.Create;
  try
    // Add commands to the TStringList object

    with UMainModule do begin
      BatchList.Add('Dim Speak, Spoken');


      BatchList.Add('set Speak=CreateObject("sapi.SPVoice")');

      if ALanguage = 1 then begin
      // English
        if AGender = 1 then begin
          BatchList.Add('Spoken = "Congratulations to Mr. or Mrs. ' + AName + ', with Account Number of '
          + AAccountNumber.SubString(1, 1) + ' '
          + AAccountNumber.SubString(2, 1) + ' '
          + AAccountNumber.SubString(3, 1) + ' '
          + AAccountNumber.SubString(4, 1) + ' '
          + AAccountNumber.SubString(5, 1) + ' '
          + AAccountNumber.SubString(6, 1) + ' '
          + AAccountNumber.SubString(7, 1) + ' '
          + AAccountNumber.SubString(8, 1) + ' ' + '"' );
          //1 is Girl
          //BatchList.Add('Speak.Voice = Speak.GetVoices.Item(1)');
        end else begin
          BatchList.Add('Spoken = "Congratulations to Mr. or Mrs. ' + AName + ', with Account Number of '
          + AAccountNumber.SubString(1, 1) + ' '
          + AAccountNumber.SubString(2, 1) + ' '
          + AAccountNumber.SubString(3, 1) + ' '
          + AAccountNumber.SubString(4, 1) + ' '
          + AAccountNumber.SubString(5, 1) + ' '
          + AAccountNumber.SubString(6, 1) + ' '
          + AAccountNumber.SubString(7, 1) + ' '
          + AAccountNumber.SubString(8, 1) + ' ' + '"' );
          //0 is Boy
          //BatchList.Add('Speak.Voice = Speak.GetVoices.Item(1)');
        end;
      end else begin
      //Tagalog
        if AGender = 1 then begin

        end else begin

        end;
      end;

      BatchList.Add('Speak.speak Spoken');
    end;

    // Save the contents of the TStringList object to a file with a ".bat" extension

    BatchList.SaveToFile(ExtractFilePath(Application.ExeName) + 'SpeechText.vbs');
  finally
    // Free the TStringList object
    BatchList.Free;
  end;
end;

procedure TUMainForm.DataSource1DataChange(Sender: TObject; Field: TField);
begin
  //Label14.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
  //Label15.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
  //Label16.Caption := VTAccountNumber.AsString + ' | ' + VTName.AsString;
end;

procedure TUMainForm.DemoDummy1Click(Sender: TObject);
var
  I,Count:Integer;
  value:String;
  BillMonthReverse:String;
begin
  With UMainModule do begin
    if not InputQuery('Generator Member Consumer', 'Please Put the Year for uploading!', value) then begin
      ShowMessage('User cancelled the dialog');
    end else begin
      //BillMonthReverse := RightStr(value,2) + LeftStr(value,2);
      tblMemberConsumerPicture.Close;
      tblMemberConsumerPicture.Open;
      tblMemberConsumerPicture.First;

      qryAccountSignature.Close;
      qryAccountSignature.Open;
      //for I := 1 to 8 do begin
        // delete first if data is available!
        //qryDeleteMemberConsumer.Close;
        //qryDeleteMemberConsumer.ParamByName('AArea').AsString := '00'+IntToStr(I);
        //qryDeleteMemberConsumer.Execute();
        // query all available data to be inserted in memberconsumer table
        qryMasterDummy.Close;
        //qryMasterDummy.ParamByName('AArea').AsString := '00'+IntToStr(I);
        qryMasterDummy.Open;
        qryMasterDummy.First;


        qryMemberConsumers.Close;
        qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
        qryMemberConsumers.Open;
        qryMemberConsumers.First;

        while not qryMasterDummy.EOF do begin
          if not qryMemberConsumers.Locate('AccountNumber',qryMasterDummyAccountNumber.AsString,[]) then begin
            Count := Count + 1;
            qryMemberConsumers.Append;
            qryMemberConsumersAccountNumber.AsString := qryMasterDummyAccountNumber.AsString;
            qryMemberConsumersName.AsString := qryMasterDummyName.AsString;
            qryMemberConsumersArea.AsString := qryMasterDummyArea.AsString;
            qryMemberConsumersAddress.AsString := qryMasterDummyAddress.AsString;
            if qryMasterDummyConsCode.AsString = 'X' then begin
              if qryMasterDummyConnCode.AsString = '3' then begin
                //Disco Vacant
                qryMemberConsumersConnectionStatus.AsInteger := 3;
                qryMemberConsumersIsQualifiedForRaffle.AsInteger := 0;
              end else begin
                //Disco
                qryMemberConsumersConnectionStatus.AsInteger := 2;
                qryMemberConsumersIsQualifiedForRaffle.AsInteger := 0;
              end;
            end else begin
              qryMemberConsumersIsQualifiedForRaffle.AsInteger :=  IsQualified(qryMasterDummyAccountNumber.AsString);
              qryMemberConsumersConnectionStatus.AsInteger := 1;

            end;
            qryMemberConsumersStatus.AsInteger := 0;
            qryMemberConsumersShuffleOrder.AsInteger := qryMemberConsumers.RecordCount + 1;
            qryMemberConsumersYear.AsString := value;
            //if Length(qryMasterGender.AsString) >= 3 then begin
            //  qryMemberConsumersGender.AsString := qryMasterGender.AsString;
            //end else begin
            //  qryMemberConsumersGender.AsString := '';
            //end;

            qryMemberConsumersIsSignatureAvailable.AsInteger :=  IsPictureAvailable(qryMasterAccountNumber.AsString);
            qryMemberConsumersRateCode.AsString :=qryMasterDummyRateCode.AsString;

            qryMemberConsumers.Post;

          end;
          qryMasterDummy.Next;
        end;

      //end;
      SpeedButton6Click(Sender);
    end;
  end;
end;

function TUMainForm.isSpeakerAvailable: Boolean;
begin
  result := (waveOutGetNumDevs > 0);
end;

procedure TUMainForm.est1Click(Sender: TObject);
begin
  if isSpeakerAvailable then begin
    ShellExecute(0, 'open', PChar(ExtractFilePath(Application.ExeName)+'SpeechText.vbs'), nil, nil, SW_HIDE);
  end;
end;

procedure TUMainForm.FormActivate(Sender: TObject);
begin
  //mpBackGround.FileName := 'Wii_Music_background.wav';
  //mpBackGround.Notify := True;
  //mpBackGround.Open;
  //mpBackGround.Play;

  mpSpinningWheel.FileName := 'spinwheel.mp3';
  mpSpinningWheel.Open;
end;

procedure TUMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  //mpBackGround.Stop;
  UMainModule.CloseIniFile(AARea);
  isRaffleTemplateCreated := False;
end;

procedure TUMainForm.FormCreate(Sender: TObject);
begin
  APrizeCategoryValue := 'Consolation';
  Panel4.Align := alClient;
  AARea := 'ALL';
  ALanguage:= 1;
  AGender:= 1;
  secondCount := 0;
  isRaffleTemplateCreated := False;
  UMainModule.CallSettings;
  UMainModule.CreateIniFile();
  IsOnRaffle := False;
  Self.Caption := 'RaffleSystem V2 ' + RzVersionInfo1.FileVersion;

end;

procedure TUMainForm.FormShow(Sender: TObject);
var
 i:Integer;
begin
  Application.ProcessMessages;
  I := 0;
  TickInterval := 0;
  ClickCounter := 0;
  //DefaultSQL := UReport.qryReportWinnersClassification.SQL;
  AArea := UMainModule.ReadIniFile();

  if AArea = 'ALL' then begin
    AAreaName := '<ALL MUNICIPALITIES>';
  end else if AArea = '001' then begin
    AAreaName := 'BULAN';
  end else if AArea = '002' then begin
    AAreaName := 'MATNOG';
  end else if AArea = '003' then begin
    AAreaName := 'STA. MAGDALENA';
  end else if AArea = '004' then begin
    AAreaName := 'IROSIN';
  end else if AArea = '005' then begin
    AAreaName := 'BULUSAN';
  end else if AArea = '006' then begin
    AAreaName := 'JUBAN';
  end else if AArea = '007' then begin
    AAreaName := 'CASIGURAN';
  end else if AArea = '008' then begin
    AAreaName := 'MAGALLANES';
  end;

  Combobox1.ItemIndex :=  ComboBox1.Items.IndexOf(AAreaName);

   with UMainModule do begin
     qrySettings.Close;
     qrySettings.Open;
     qrySettings.First;
     if qrySettingsTheme.AsString.Contains('1')  then begin
       RaffleTemplate1U := TRaffleTemplate1U.Create(Application);
       RaffleTemplate1U.ShowInPanel(pnlRaffleTemplate);
     end else if qrySettingsTheme.AsString.Contains('2')  then begin
       RaffleTemplate2U := TRaffleTemplate2U.Create(Application);
       RaffleTemplate2U.ShowInPanel(pnlRaffleTemplate);
     end;
   end;

  SpeedButton6Click(Sender);
end;

procedure TUMainForm.GenderTester1Click(Sender: TObject);
  Var
  value : String;
begin
  if not InputQuery('Gender Reveal', 'Put Name to Identify!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    GetGenderOfFirstNames(Value);
  end;

end;

procedure TUMainForm.GetFromCooptoLocalData1Click(Sender: TObject);
var
  I,Count:Integer;
  value,CategoryValue:String;
  BillMonthReverse:String;
begin
  With UMainModule do begin
    if not InputQuery('Generator Member Consumer', 'Please Put the Year for uploading!', value) then begin
      ShowMessage('User cancelled the dialog');
    end else begin
      //BillMonthReverse := RightStr(value,2) + LeftStr(value,2);
      tblMemberConsumerPicture.Close;
      tblMemberConsumerPicture.Open;
      tblMemberConsumerPicture.First;

      qryAccountSignature.Close;
      qryAccountSignature.Open;
      qryAccountSignature1.Close;
      qryAccountSignature1.Open;
      //for I := 1 to 8 do begin
      InputQuery('CATEGORY', 'Please Enter CATEGORY ONLY!', CategoryValue);
      qryVicinity.Close;
      qryVicinity.ParamByName('ACategory').AsString := CategoryValue;
      qryVicinity.Open;
      qryVicinity.First;

      while not qryVicinity.EOF do begin

        // delete first if data is available!
        //qryDeleteMemberConsumer.Close;
        //qryDeleteMemberConsumer.ParamByName('AArea').AsString := '00'+IntToStr(I);
        //qryDeleteMemberConsumer.Execute();
        // query all available data to be inserted in memberconsumer table
        qryMaster.Close;
        qryMaster.ParamByName('ABook').AsString := qryVicinityBook.AsString;
        //qryMaster.ParamByName('AArea').AsString := '00'+IntToStr(i);
        qryMaster.Open;
        qryMaster.First;

        qryMemberConsumers.Close;
        qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
        qryMemberConsumers.Open;
        qryMemberConsumers.First;

        while not qryMaster.EOF do begin
          if not qryMemberConsumers.Locate('AccountNumber',qryMasterAccountNumber.AsString,[]) then begin
            Count := Count + 1;
            qryMemberConsumers.Append;
            qryMemberConsumersAccountNumber.AsString := qryMasterAccountNumber.AsString;
            qryMemberConsumersName.AsString := qryMasterName.AsString;
            qryMemberConsumersArea.AsString := qryMasterArea.AsString;
            qryMemberConsumersAddress.AsString := qryMasterAddress.AsString;
            if qryMasterConsCode.AsString = 'X' then begin
              if qryMasterConnCode.AsString = '3' then begin
                //Disco Vacant
                qryMemberConsumersConnectionStatus.AsInteger := 3;
                qryMemberConsumersIsQualifiedForRaffle.AsInteger := 0;
              end else begin
                //Disco
                qryMemberConsumersConnectionStatus.AsInteger := 2;
                qryMemberConsumersIsQualifiedForRaffle.AsInteger := 0;
              end;
            end else begin
              qryMemberConsumersIsQualifiedForRaffle.AsInteger :=  IsQualified(qryMasterAccountNumber.AsString);
              qryMemberConsumersConnectionStatus.AsInteger := 1;
            end;
            qryMemberConsumersStatus.AsInteger := 0;
            qryMemberConsumersShuffleOrder.AsInteger := qryMemberConsumers.RecordCount + 1;
            qryMemberConsumersYear.AsString := value;
            //if Length(qryMasterGender.AsString) >= 3 then begin
            //  qryMemberConsumersGender.AsString := qryMasterGender.AsString;
            //end else begin
            //  qryMemberConsumersGender.AsString := '';
            //end;

            qryMemberConsumersIsSignatureAvailable.AsInteger :=  IsPictureAvailable(qryMasterAccountNumber.AsString);
            qryMemberConsumersRateCode.AsString := qryMasterRateCode.AsString;

            qryMemberConsumers.Post;

          end;
          qryMaster.Next;
        end;
        qryVicinity.Next;
      end;
      SpeedButton6Click(Sender);
      MessageDlg('Generating Done, You Can Now Extract the Data For : ' + CategoryValue,mtInformation,[mbClose],0);
    end;
  end;
end;

function TUMainForm.GetGenderOfFirstNames(const firstName: string
//; const apiKey: string
): string;
var
  httpClient: THttpClient;
  url: string;
  response: IHTTPResponse;
  jsonObj: TJSONObject;
begin
  httpClient := THttpClient.Create;
  try
    //url := 'https://api.genderize.io/?name=' + firstName ;
    url := 'https://gender-api.com/get?name=' + firstName + '';
    // + '&apikey=' + apiKey;
    //Example: https://gender-api.com/get?name=elizabeth&key=zFCT2mhYdQKSBQuWj4gdW7awqvHpXeA6n5VU
    response := httpClient.Get(url);
  finally
    httpClient.Free;
  end;

  jsonObj := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONObject;
  try
    Result := jsonObj.GetValue('gender').Value;
  finally
    jsonObj.Free;
  end;

  //ShowMessage(Result);
end;

function TUMainForm.GetGendersOfFirstNames(const firstNames: String
//; const apiKey: string
): TDictionary<string,string>;
var
  httpClient: THttpClient;
  url: string;
  response: IHTTPResponse;
  jsonArr: TJSONArray;
  jsonObj: TJSONObject;
  i: Integer;
begin
  httpClient := THttpClient.Create;
  try
    url := 'https://api.genderize.io/?';
    for i := Low(firstNames) to High(firstNames) do
    begin
      url := url + 'name[]=' + firstNames[i] ;
      //+
      //'&';
    end;
    //url := url + 'apikey=' + apiKey;

    response := httpClient.Get(url);
  finally
    httpClient.Free;
  end;

  Result := TDictionary<string,string>.Create;
  jsonArr := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONArray;
  try
    for i := 0 to jsonArr.Count - 1 do
    begin
      jsonObj := jsonArr.Items[i] as TJSONObject;
      Result.Add(jsonObj.GetValue('name').Value, jsonObj.GetValue('gender').Value);
    end;
  finally
    jsonArr.Free;
  end;

end;


function TUMainForm.GetGenderOfFirstName(const firstName,
  apiKey: string): string;
var
  http: TIdHTTP;
  url, response: string;
  //parser: TJSONParser;
  jsonObj: TJSONObject;
begin
  http := TIdHTTP.Create(nil);
  try
    url := 'https://api.genderize.io/?name=' + firstName + '&apikey=' + apiKey;
    response := http.Get(url);
  finally
    http.Free;
  end;

  //parser := TJSONParser.Create(response);
  //try
  //  jsonObj := parser.Parse as TJSONObject;
  //  Result := jsonObj.GetValue('gender').Value;
  //finally
  //  parser.Free;
  //end;
end;

procedure TUMainForm.Hide1Click(Sender: TObject);
begin
  if Panel1.Visible then begin
    with RaffleTemplate1U do begin
      Panel1.Visible := False;

      Image3.Width :=  Self.Width;
      Image3.Left :=  0;
      label15.Width := Self.Width;
      label15.Left := 20;

      Image4.Width :=  Self.Width;
      Image4.Left :=  0;
      label16.Width := Self.Width;
      label16.Left := 20;

      //DBGridEh3.Width := Self.Width;
      //DBGridEh3.Left := 0;
      //DBGridEh2.Width := Self.Width;
      //DBGridEh2.Left := 0;
      // make center the spinning wheel
      // LEFT
      Image1.Left := (Self.Width DIV 2) - (Image1.Width DIV 2);
      SpeedButton5.Left := (Self.Width DIV 2) - (SpeedButton5.Width DIV 2);
      Image6.Left := (Self.Width DIV 2) - (Image6.Width DIV 2);
      Image2.Left := (Self.Width DIV 2) + (Image1.Width DIV 2) - (Image2.Width DIV 2);
      // TOP
      Image1.Top := ((Self.Height - Image3.Height)  DIV 2) - (Image1.Height DIV 2) + 10;
      SpeedButton5.Top := ((Self.Height - Image3.Height) DIV 2) - (SpeedButton5.Height DIV 2) + 10;
      Image6.Top := ((Self.Height - Image3.Height) DIV 2) - (Image6.Height DIV 2) + 6;
      Image2.Top := ((Self.Height - Image3.Height) DIV 2) - (Image2.Height DIV 2) + 10;
    end;
  end else begin
    with RaffleTemplate1U do begin
      Panel1.Visible := True;

      Image3.Width := Self.Width - Panel1.Width;
      Image3.Left := Panel1.Width;
      label15.Width := Self.Width - Panel1.Width;
      label15.Left := Panel1.Width + 20;

      Image4.Width :=  Self.Width - Panel1.Width;
      Image4.Left :=  Panel1.Width;
      label16.Width := Self.Width - Panel1.Width;
      label16.Left := Panel1.Width + 20;

      //DBGridEh3.Width := Self.Width - Panel1.Width;
      //DBGridEh3.Left := Panel1.Width;
      //DBGridEh2.Width := Self.Width - Panel1.Width;
      //DBGridEh2.Left := Panel1.Width;
      // make center the spinning wheel
      // LEFT
      Image1.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (Image1.Width DIV 2);
      SpeedButton5.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (SpeedButton5.Width DIV 2);
      Image6.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) - (Image6.Width DIV 2);
      Image2.Left := (Panel1.Width + (Self.Width - Panel1.Width) DIV 2) + (Image1.Width DIV 2) - (Image2.Width DIV 2);
      // TOP
      Image1.Top := ((Self.Height - Image3.Height)  DIV 2) - (Image1.Height DIV 2) + 10;
      SpeedButton5.Top := ((Self.Height - Image3.Height) DIV 2) - (SpeedButton5.Height DIV 2) + 10;
      Image6.Top := ((Self.Height - Image3.Height) DIV 2) - (Image6.Height DIV 2) + 6;
      Image2.Top := ((Self.Height - Image3.Height) DIV 2) - (Image2.Height DIV 2) + 10;
    end;

  end;
end;

procedure TUMainForm.Image2MouseEnter(Sender: TObject);
begin
  //Label14.Visible := True;
  //mgHoverArrowShowSelected.Visible := True;
end;

function TUMainForm.FetchAndPopulateImage(Const AccountNumber:String) : Integer;
var
  httpClient: THttpClient;
  url: string;
  response: IHTTPResponse;
  jsonObj: TJSONObject;
  JSONArray: TJSONArray;
  I:Integer;
  SplitName:String;
  SplitFirst:String;
  SplitLastName:String;
  SplitCount:Integer;
begin
  httpClient := THttpClient.Create;
  try
    //url := 'https://api.genderize.io/?name=' + firstName ;
    url := 'https://soreco1.org/api/getPicture?AccountNumber='+AccountNumber;
    // + '&apikey=' + apiKey;
    //Example: https://gender-api.com/get?name=elizabeth&key=zFCT2mhYdQKSBQuWj4gdW7awqvHpXeA6n5VU
    response := httpClient.Get(url);
  finally
    httpClient.Free;
  end;
  //VirtualTable.Clear;
  if Pos('No matching data found', response.ContentAsString) > 0 then begin
    Result := 0;
    Exit;
  end;

  JSONArray := TJSONObject.ParseJSONValue(response.ContentAsString) as TJSONArray;
  try
    // Iterate through JSON array and populate VirtualTable
    if JSONArray.Count = 1 then
    begin
      jsonObj := JSONArray.Items[0] as TJSONObject;
      with UMainModule do begin
        if not tblMemberConsumerPicture.Locate('AccountNumber',jsonObj.GetValue('AccountNumber').Value,[]) then begin
          tblMemberConsumerPicture.Append;
          //ShowMessage(jsonObj.GetValue('AccountNumber').Value);
          tblMemberConsumerPictureAccountNumber.AsString := jsonObj.GetValue('AccountNumber').Value;
          tblMemberConsumerPictureApplicantSignature.AsBytes := DecodeBase64(jsonObj.GetValue('ApplicantSignature').Value);
          //tblMemberConsumerPictureApplicantPicture.AsString := DecodeBase64(jsonObj.GetValue('ApplicantPicture').Value);
          //tblMemberConsumerPictureApplicantSpouse.AsString := DecodeBase64(jsonObj.GetValue('ApplicantSpouse').Value);
          tblMemberConsumerPicture.Post;
        end;

      end;
      result := 1;
    end else begin
      result := 0;

    end;

  finally
    JSONArray.Free;
  end;
end;

function TUMainForm.GetFirstLetterOfLastWord(const S: string): Char;
var
  LastSpacePos: Integer;
begin
  // Find the position of the last space
  LastSpacePos := LastDelimiter(' ', S);

  // If no space is found, consider the whole string as the last word
  if LastSpacePos = 0 then
    Result := S[1]
  else
  begin
    // Extract the last word and return its first letter
    Result := S[LastSpacePos + 1];
  end;
end;

function TUMainForm.GetAllWordsExceptLast(const S: string): string;
var
  LastSpacePos: Integer;
begin
  // Find the position of the last space
  LastSpacePos := LastDelimiter(' ', S);

  // If no space is found or if the string has only one word, return an empty string
  if (LastSpacePos = 0) or (LastSpacePos = Length(S)) then
    Exit('');

  // Extract all words except the last one
  Result := Copy(S, 1, LastSpacePos - 1);
end;

function TUMainForm.IsPictureAvailable(const AAccountNumber: String): Integer;
begin
  with UMainModule do begin
    result := 0;
    qryAccountSignature.First;
    qryAccountSignature1.First;
    if not qryAccountSignature.IsEmpty then begin
      if qryAccountSignature.Locate('AccountNumber',AAccountNumber,[]) then begin
        if qryAccountSignatureStatus.AsString.Contains('Not') then begin
          result := 0;
        end else begin
          if tblMemberConsumerPicture.Locate('AccountNumber',AAccountNumber,[]) then begin
            tblMemberConsumerPicture.Edit;
          end else begin
            tblMemberConsumerPicture.Append;
          end;
          tblMemberConsumerPictureAccountNumber.AsString := AAccountNumber;
          tblMemberConsumerPictureApplicantSignature.AsBytes := qryAccountSignatureApplicantSignature.AsBytes;
          tblMemberConsumerPicture.Post;
          result := 1;
        end;
      end else begin
        if qryAccountSignature1.Locate('AccountNumber',AAccountNumber,[]) then begin
          result := 1;
        end else begin
          result := 0 ;
        end;

        //I Should look to the other table Signature temp table
        // This Table will be the store table if Image From A2Hosting Database
        // same Logic Applies for this table Locate
        //result := FetchAndPopulateImage(AAccountNumber);


      end;
    end;
  end;
end;

function TUMainForm.IsQualified(const AAccountNumber: String): Integer;
begin
  // THIS IS FOR ARLEDGER CHECKING
  // SINCE THERE IS A PROBLEM ON BILLING SIDE POSTING
  // OF THERE RECORD ON ARLEDGER
  // WE WILL BE COMMENTING OUT THIS PART

  with UMainModule do begin
    {qryAccountQualifier.Close;
    qryAccountQualifier.ParamByName('AAccountNumber').AsString := AAccountNumber;
    qryAccountQualifier.Open;
    if qryAccountQualifier.IsEmpty then begin
      Result := 0;
    end else begin
      if qryAccountQualifierStatus.AsString.Contains('OLD') then begin
        Result := 0;
      end else begin
        Result := 1;
      end;
    end;}

    // THIS IS THE CODE FOR COLLECTION CHECKING
    {'C'
  'G'
  'I'
  'P'
  'R'
  'S'}
    if (qryMasterRateCode.AsString = 'S') OR (qryMasterRateCode.AsString = 'G')
    OR (qryMasterRateCode.AsString = 'I') OR (qryMasterRateCode.AsString = 'P') then begin
      Result := 0;
    end else begin
      qryAccountQualifier1.Close;
      qryAccountQualifier1.ParamByName('AAccountNumber').AsString := AAccountNumber;
      qryAccountQualifier1.Open;
      if qryAccountQualifier1.IsEmpty then begin
        Result := 0;
      end else begin
        if qryAccountQualifier1Status.AsString.Contains('OLD') then begin
          Result := 0;
        end else begin
          Result := 1;
        end;
      end;
    end;
  end;


end;

procedure TUMainForm.Label4Click(Sender: TObject);
begin
  if ClickCounter>=5 then begin
    //SpeedButton5.Enabled := True;

  end else begin
    //SpeedButton5.Enabled := False;
    ClickCounter := ClickCounter +1;
  end;
end;

procedure TUMainForm.mpBackGroundNotify(Sender: TObject);
begin
  while mpBackGround.Mode = mpPlaying do
  begin
    if mpBackGround.Position >= mpBackGround.Length then
      mpBackGround.Play;
    Application.ProcessMessages;
  end;
end;

procedure TUMainForm.N2Click(Sender: TObject);
begin
  With UmainModule do begin

  end;
end;

procedure TUMainForm.PrizeCategory(Sender: TObject);
begin
  if CheckBox1.Checked  then begin
    APrizeCategoryValue := 'Consolation';
    UMainModule.qrySettings.Edit;
    UMainModule.qrySettingsIsVenueRegistration.AsInteger := USettings.BoolToInt(True);
    UMainModule.qrySettingsIsOnlineRegistration.AsInteger := USettings.BoolToInt(True);
    UMainModule.qrySettingsIsPreRegistration.AsInteger := USettings.BoolToInt(True);
    UMainModule.qrySettings.Post;
    UMainModule.CallSettings;
    UMainForm.SpeedButton6Click(Sender);
    //USettings.scGPButton1Click(Sender);
  end else begin
    APrizeCategoryValue := 'Grand';
    UMainModule.qrySettings.Edit;
    UMainModule.qrySettingsIsVenueRegistration.AsInteger := USettings.BoolToInt(True);
    UMainModule.qrySettingsIsOnlineRegistration.AsInteger := USettings.BoolToInt(false);
    UMainModule.qrySettingsIsPreRegistration.AsInteger := USettings.BoolToInt(false);
    UMainModule.qrySettings.Post;
    UMainModule.CallSettings;
    UMainForm.SpeedButton6Click(Sender);
  end;
end;

procedure TUMainForm.Refresh1Click(Sender: TObject);
begin
  SpeedButton6Click(Sender);
  SpeedButton7Click(Sender);
end;

procedure TUMainForm.ReGenderize1Click(Sender: TObject);
begin
  with UMainModule do begin
    FDQuery1.Close;
    FDQuery1.Open();
    FDQuery1.First;
    qryMemberConsumers.Close;
    qryMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryMemberConsumers.Open();
    qryMemberConsumers.First;
    while Not FDQuery1.EOF do begin
      if qryMemberConsumers.Locate('AccountNumber',FDQuery1AccountNumber.AsString,[]) then begin
        qryMemberConsumers.Edit;
        qryMemberConsumersGender.AsString :=  FDQuery1Gender.AsString;
        qryMemberConsumers.Post;
      end;
      FDQuery1.Next;
    end;

  end;
end;

procedure TUMainForm.SearchMemberConsumers1Click(Sender: TObject);
var
  UMemberConsumer : TUMemberConsumer;
begin
  try
    screen.Cursor := crHourGlass;
    UMemberConsumer := TUMemberConsumer.Create(nil);
    UMemberConsumer.ShowModal();
  finally
    UMemberConsumer.Free();
    screen.Cursor := crDefault;
  end;

end;

procedure TUMainForm.SpeechSettings1Click(Sender: TObject);
var
  USettings : TUSettings;
begin
  try
    screen.Cursor := crHourGlass;
    USettings := TUSettings.Create(nil);
    USettings.ShowModal();
  finally
    USettings.Free();
    screen.Cursor := crDefault;
  end;
end;

procedure TUMainForm.SpeedButton1Click(Sender: TObject);
begin
  Shape1.Visible := True;
  Shape2.Visible := False;
  Panel4.Visible := True;
  Panel7.Visible := False;
  SpeedButton6Click(Sender);
end;

procedure TUMainForm.SpeedButton2Click(Sender: TObject);
begin
  Shape1.Visible := False;
  Shape2.Visible := True;
  Panel4.Visible := False;
  Panel7.Visible := True;

  SpeedButton7Click(Sender);
end;

procedure TUMainForm.SpeedButton3Click(Sender: TObject);
Var
  I:Integer;
  J:Integer;
  Temp:Integer;
begin
   Timer2.Enabled := True;
   With UMainModule do begin
     J := RandomRange(1,2);
     //for I := 0 to J do begin
       qryMCQualified.First;
       while not qryMCQualified.EOF do begin
         qryMCQualified.Edit;
         qryMCQualifiedShuffleOrder.AsInteger := RandomRange(1,90000);
         qryMCQualified.Post;
         qryMCQualified.Next;
       end;
       qryMCQualified.Refresh;

     //end;
     qryMCQualified.First;
   end;
end;

procedure TUMainForm.SpeedButton4Click(Sender: TObject);
begin
   if SpeedButton4.Caption = 'Sort' then begin
     SpeedButton4.Caption := 'Disordered';
     UMainModule.qryMCQualified.IndexFieldNames := 'ShuffleOrder';
   end else begin
     SpeedButton4.Caption := 'Sort';
     UMainModule.qryMCQualified.IndexFieldNames := 'ID';
   end;
   UMainModule.qryMCQualified.First;
end;

procedure TUMainForm.SpeedButton6Click(Sender: TObject);
Var
  AListRegistration : String;
begin
  With UMainModule do begin

    qryCount.Close;
    qryCount.ParamByName('AArea').AsString := AArea;
    qryCount.ParamByName('AYear').AsInteger := CurrentYear;
    qryCount.Open();
    qryCount.First;
    Label3.Caption := FormatCurr('#,##0.00',(qryCountConsumerRegister.AsInteger));
    if qrySettingsTheme.AsString.Contains('2')  then begin
      RaffleTemplate2U.Label3.Caption := FormatCurr('#,##0.00',(qryCountConsumerRegister.AsInteger));

    end;
    FDQuery2.Close;
    qryMCQualified.Close;
    qryMCQualifiedAll.Close;
    //with UMainModule do begin
    //  if AIsVenueReg then

    //end;


    if UMainModule.AIsVenueReg then begin
      qryMCQualified.ParamByName('EntryMode1').AsString := 'VENUE-REGISTRATION';
      FDQuery2.ParamByName('EntryMode1').AsString := 'VENUE-REGISTRATION';
      qryMCQualifiedAll.ParamByName('EntryMode1').AsString := 'VENUE-REGISTRATION';
      Label7.Caption := 'V';
      RaffleTemplate2U.Label5.Caption := 'VENUE REGISTRATION';
    end else begin
      qryMCQualified.ParamByName('EntryMode1').AsString := '';
      FDQuery2.ParamByName('EntryMode1').AsString := '';
      qryMCQualifiedAll.ParamByName('EntryMode1').AsString := '';
      Label7.Caption := '';
      RaffleTemplate2U.Label5.Caption := '';
    end;
    if UMainModule.AIsOnlineReg then begin
      qryMCQualified.ParamByName('EntryMode2').AsString := 'ONLINE-REGISTRATION';
      qryMCQualifiedAll.ParamByName('EntryMode2').AsString := 'ONLINE-REGISTRATION';
      FDQuery2.ParamByName('EntryMode2').AsString := 'ONLINE-REGISTRATION';
      Label7.Caption := Label7.Caption + 'O';
      RaffleTemplate2U.Label5.Caption := RaffleTemplate2U.Label5.Caption + ' ONLINE REGISTRATION ';
    end else begin
      qryMCQualified.ParamByName('EntryMode2').AsString := '';
      qryMCQualifiedAll.ParamByName('EntryMode2').AsString := '';
      FDQuery2.ParamByName('EntryMode2').AsString := '';
      Label7.Caption := Label7.Caption + '';
      RaffleTemplate2U.Label5.Caption := RaffleTemplate2U.Label5.Caption + ''
    end;
    if UMainModule.AIsPreReg then begin
      qryMCQualified.ParamByName('EntryMode3').AsString := 'PRE-REGISTRATION';
      qryMCQualifiedAll.ParamByName('EntryMode3').AsString := 'PRE-REGISTRATION';
      FDQuery2.ParamByName('EntryMode3').AsString := 'PRE-REGISTRATION';
      Label7.Caption := Label7.Caption + 'P';
      RaffleTemplate2U.Label5.Caption := RaffleTemplate2U.Label5.Caption + ' PRE-REGISTRATION ';
    end else begin
      qryMCQualified.ParamByName('EntryMode3').AsString := '';
      FDQuery2.ParamByName('EntryMode3').AsString := '';
      qryMCQualifiedAll.ParamByName('EntryMode3').AsString := '';
      Label7.Caption := Label7.Caption + '';
      RaffleTemplate2U.Label5.Caption := RaffleTemplate2U.Label5.Caption + '';
    end;

    FDQuery2.ParamByName('AARea').AsString := AArea;
    qryMCQualified.ParamByName('AARea').AsString := AArea;
    qryMCQualified.ParamByName('AYear').AsInteger := CurrentYear;
    FDQuery2.ParamByName('AYear').AsInteger := CurrentYear;
    //qryMCQualifiedAll.ParamByName('AARea').AsString := AArea;
    qryMCQualifiedAll.ParamByName('AYear').AsInteger := CurrentYear;

    FDQuery2.Open;
    FDQuery2.First;

    qryMCQualified.Open;
    qryMCQualified.First;

    qryMCQualifiedAll.Open;
    qryMCQualifiedAll.First;

    qryMCQualified.IndexFieldNames := 'ShuffleOrder';
    qryMCQualified.First;

    qryWinnerMC.Close;
    qryWinnerMC.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMC.Open;

    RaffleTemplate2U.Label3.Caption := FormatCurr('#,##0.00',(qryMCQualified.RecordCount));
    Label3.Caption := FormatCurr('#,##0.00',(qryMCQualified.RecordCount));

    Label6.Caption := ' - '+ FormatCurr('#,##0.00',(qryMCQualified.RecordCount));

  end;
end;

procedure TUMainForm.SpeedButton7Click(Sender: TObject);
begin
  With UMainModule do begin
    qryWinnerMemberConsumers.Close;
    qryWinnerMemberConsumers.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMemberConsumers.ParamByName('AARea').AsString := AArea;
    qryWinnerMemberConsumers.Open;
    qryWinnerMemberConsumers.First;

    //qryWinnerMemberConsumers.IndexFieldNames := 'ShuffleOrder';
    qryWinnerMemberConsumers.First;

    qryWinnerMC.Close;
    qryWinnerMC.ParamByName('AYear').AsInteger := CurrentYear;
    qryWinnerMC.Open;

    Label11.Caption := FormatCurr('#,##0.00',(qryWinnerMemberConsumers.RecordCount));
  end;
end;

procedure TUMainForm.SpeedButton8Click(Sender: TObject);
begin
  if SpeedButton4.Caption = 'Sort' then begin
   SpeedButton4.Caption := 'Disordered';
   UMainModule.qryWinnerMemberConsumers.IndexFieldNames := 'AccountNumber';
  end else begin
   SpeedButton4.Caption := 'Sort';
   UMainModule.qryWinnerMemberConsumers.IndexFieldNames := 'OrderBy';
  end;
  UMainModule.qryWinnerMemberConsumers.First;
end;

procedure TUMainForm.Summary1Click(Sender: TObject);
Var
  value : String;
begin
  if not InputQuery('Reports', 'Please Put the Year of AGMA!', value) then begin
    ShowMessage('User cancelled the dialog');
  end else begin
    with Ureport do begin
      qrySummary.Close;
      qrySummary.ParamByName('AYear').AsString := value;
      qrySummary.Open;
      qrySummary.First;
      QRPLabel24.Caption := 'Y.R. ' + value;
      qrSummary.Preview;
    end;
  end;
end;

procedure TUMainForm.Timer2Timer(Sender: TObject);
begin
  if secondCount >= 5 then begin
    UMainModule.qryMCQualified.Last;
    Timer2.Enabled := False;
    secondCount := 0;
  end else begin
    secondCount := secondCount + 1;

  end;

end;

procedure TUMainForm.UpdateLocalDatabaseFromOnlineDatabase1Click(
  Sender: TObject);
begin
  try
    screen.Cursor := crHourGlass;
    UpdateDatabaseU := TUpdateDatabaseU.Create(nil);
    UpdateDatabaseU.ShowModal();
  finally
    UpdateDatabaseU.Free();
    screen.Cursor := crDefault;
  end;
end;

procedure TUMainForm.UploadMemberConsumers1Click(Sender: TObject);
begin
  try
    screen.Cursor := crHourGlass;
    UUploaderPreRegistration := TUUploaderPreRegistration.Create(nil);
    UUploaderPreRegistration.ShowModal();
  finally
    UUploaderPreRegistration.Free();
    screen.Cursor := crDefault;
  end;
end;

procedure TUMainForm.Winner1Click(Sender: TObject);
begin
  try
    screen.Cursor := crHourGlass;
    UWinner := TUWinner.Create(nil);
    UWinner.ShowModal();
  finally
    UWinner.Free();
    screen.Cursor := crDefault;
  end;
end;

end.
